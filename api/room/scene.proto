syntax = "proto3";
package room;

import "room/rcommon.proto";
import "room/room.proto";

option go_package = "room/api;roompb";

enum UnityType {
  UnitEmpty = 0; // 占位类型
  UnitPlayer = 1; // 玩家角色
  UnitNpc = 2; // npc
  UnitMonster = 3; // 怪物
  UnitItem = 4; // 场景道具
  UnitSummoned = 5; // 召唤物
  UnitCollectible = 6; // 采集物
}

// AttributeType 属性类型
enum AttributeType {
  None = 0; // 占位
  Hp = 1; // 当前生命
  MaxHp = 2; // 最大生命
  Atk = 3; // 攻击力
  Def = 4; // 防御
  Spd = 5; // 速度
  Penetration = 6; // 伤害穿透
  PenetrationRate = 7; // 伤害穿透率
  HPRecovery = 8; // 生命恢复
  CritRate = 9; // 暴击率

  HpChange = 101;
}

// 视野进出行为的原因
enum EyeshotAction {
  default = 0;
  bePicked = 1; // 被拾取
  Pipe = 2; // 管道
  invisible = 3; // 隐身
  EnterGrass = 4; // 进入草丛
  LeaveGrass = 5; // 离开草丛
}

enum TerrainTouchAction {
  ActNone = 0;
  ActFountain = 1; // 喷泉
  ActPipe = 2; // 管道
}

message C2SMovePrepare {}

message S2CMovePrepare {
  int32 timeRemain = 1; // 如果禁止移动,这里代表剩余时间
}

// C2SMove 移动消息
message C2SMove {
  Vector current = 1; //当前位置
  int32 direct = 2; // 移动朝向
  Vector dest = 3; // 目标位置
}

// C2SMove 移动消息返回
message S2CMove {
  Vector current = 1; //当前位置
  int32 direct = 2; // 移动朝向
  Vector dest = 3; // 移动方向,目前服务器未使用此字段,仅仅是透传
}

// S2CUnitMove 广播移动消息
message NtfUnitMove {
  int64 unitId = 1; // 场景单位唯一id
  UnityType typ = 2; // 场景单位类型
  Vector current = 3; //当前位置
  MovingContext movingContext = 4;
  //  int32 speed = 4; // 速度
  //  int32 direct = 5; // 移动方向
  //  Vector dest = 6; // 移动目标,服务器透传
}

message C2SStopMoving {
  Vector pos = 1;
  int32 direct = 2;
}

// S2CStopMoving 停止移动消息
message S2CStopMoving {
  Vector pos = 1; // 停止位置
  int32 direct = 2;
}

// 停止移动广播消息
message NtfUnitStopMoving {
  int64 unitId = 1; // 场景单位唯一id
  UnityType typ = 2; // 场景单位类型
  Vector pos = 3; // 停止位置
  int32 direct = 4;
}

// NtfFlashTo 服务器通知客户端场景单位强制移动到某个位置
message NtfFlashTo {
  int64 unitId = 1;
  Vector pos = 2;
}

// S2CUnitEnterEyeshot 场景单位进入视野消息
message NtfUnitEnterEyeshot {
  int64 unitId = 1; // 场景单位唯一id
  UnityType typ = 2; // 场景单位类型
  string name = 3; // 单位名称
  int32 cfgId = 4; // 配置id 用于场景模型显示的相关配置id
  Vector pos = 5; // 位置信息
  int32 faceToDirect = 6; // 朝向(弧度值)
  int32 hp = 7;
  int32 max_hp = 8;
  int32 camp = 9; // 阵营
  map<int32, UnitBuff> buffs = 10;
}


message UnitBuff {
  int32 id = 1; // buff id
  int64 timeUp = 2; // 到期时间戳
  int32 overlay = 3; // 叠加层数
}


message MovingContext {
  oneof ctxKind {
    NormalMovingContext normalMoveContext = 1;
    DirectMovingContext directMoveContext = 2;
    WayPointsMovingContext wayPointsMoveContext = 3;
    AccelerationMovingContext accelerationMoveContext = 4;
  }
}

// NormalMovingContext 移动
message NormalMovingContext {
  DirectMovingContext base = 1;
  Vector dest = 2; // 移动目标,服务器透传
}

// MovingContext 移动
message DirectMovingContext {
  int32 speed = 1; // 速度
  int32 direct = 2; // 移动方向
}

message WayPointsMovingContext {
  DirectMovingContext base = 1;
  Vector v1 = 2;
  Vector v2 = 3;
  bool v2Valid = 4; // 标记v2是否有效
}

// AccelerationMovingContext 加速度移动
message AccelerationMovingContext {
  DirectMovingContext base = 1;
  int32 acceleration = 2; // 加速度(乘以10000) 加速度>0, 减速度<0
  Vector dest = 3; // 预测的移动终点目标
  int32 deltaTime = 4; // 预测的移动时间(毫秒)
}

// S2CPlayerEnterEyeshot 角色进入视野消息
message NtfPlayerEnterEyeshot {
  EyeshotAction action = 1;
  NtfUnitEnterEyeshot base = 2;
  int32 skinId = 3;
  int32 group_id = 4; // 阵营id
  map<int32, Buff> buffs = 5; //buff列表   // 废弃掉 为了版本兼容，暂时保留
  MovingContext movingContext = 6;
  int64 pet_profile_id = 7;//宠物外观ID 身体  + 帽子 * 10000 + 翅膀*10000^2 + 武器*10000^3
}

// S2CUnitLeaveEyeshot 场景单位离开视野
message NtfUnitLeaveEyeshot {
  int64 unitId = 1; // 场景单位唯一id
  EyeshotAction action = 2;
}

// NtfMonsterEnterEyeshot 怪物进入视野
message NtfMonsterEnterEyeshot {
  NtfUnitEnterEyeshot base = 1;
  MovingContext movingContext = 2;
}

// NtfPlayerUpdateProfile 广播玩家切换基本信息
message NtfPlayerUpdateProfile {
  int64 unitId = 1;
  int32 heroId = 2;
  string name = 3;
  int64 pet_profile_id = 4;//宠物外观组合ID 身体  + 帽子 * 10000 + 翅膀*10000^2 + 武器*10000^3
  int32 skinId = 5; //皮肤ID
}
// NtfPlayerSelectSkin 玩家的英雄信息更新通知
message NtfPlayerSelectSkin {
  int64 player_id = 1; // playerId
  int32 hero_id = 2;
  int32 skin_id = 3;
}
// NtfItemDrop 物品掉落
message NtfItemDrop {
  int64 unitId = 1; // 道具id(唯一id)
  int32 itemId = 2; // 道具配置id
  int64 ownerId = 3; // 掉落者id
  Vector oriPos = 4; // 从哪掉的
  Vector pos = 5; // 掉到哪
}

// C2SPickupItem 拾取道具
message C2SPickupItem {
  int64 unitId = 1;
}

// S2CPickupItem 拾取道具响应
message S2CPickupItem {
  int64 unitId = 1;
  int32 err_code = 2;
}

// C2SPickupItem 拾取道具
message C2SUnPickupItem {
  int64 unitId = 1;
}

// S2CPickupItem 拾取道具响应
message S2CUnPickupItem {
  int64 unitId = 1;
  int32 err_code = 2;
}

// NTFPickupItem 广播玩家拾取了道具
message NtfPickupItem {
  int64 playerId = 1; // playerId
  int64 unitId = 2; // 拾取物id
}

// NtfUnPickupItem 广播玩家扔掉了道具
message NtfUnPickupItem {
  int64 playerId = 1; // playerId
  int64 unitId = 2; // 扔掉的物id
  int32 score = 3; // 得分
}

// 单位移动批处理消息
message NtfUnitMoveBatch {
  repeated NtfUnitMove unitMovements = 1;
}

// 单位停止移动批处理消息
message NtfUnitStopBatch {
  repeated NtfUnitStopMoving unitStop = 1;
}

// 属性变化更新消息(hp除外)
message NtfAttributeUpdate {
  int64 unitId = 1;
  map<int32, int32> changes = 2;
}

// 移动批处理消息
message NtfUnitMovementBatch{
  repeated UnitMovement movements = 1;
}

// 移动消息 移动或者停止移动,用于批处理
message UnitMovement{
  oneof movement{
    NtfUnitMove move = 1;
    NtfUnitStopMoving stop = 2;
    NtfUnitJump jump = 3;
    NtfFlashTo flash = 4;
  }
}

// 跳跃
message C2SJump{
}

message S2CJump{
}

// NtfUnitJump 广播单位跳跃
message NtfUnitJump{
  int64 unitId = 1;
}


// C2STouchTerrain 触碰地形
message C2STouchTerrain{
  TerrainTouchAction action = 1;
}

// S2CTouchTerrain 触碰地形响应
message S2CTouchTerrain{
  int32 err_code = 1;
}

// C2STouchTerrainEnd 触碰地形结束
message C2STouchTerrainEnd{
  TerrainTouchAction action = 1;
  Vector position = 2;
}

// S2CTouchTerrainEnd 触碰地形结束响应
message S2CTouchTerrainEnd{
}

// NtfTerrainCollapseWarning 地形坍塌警告
message NtfTerrainCollapseWarning{
  repeated int32 terrainOrder = 1;
  int32 collapseCountDown = 2; // 坍塌倒计时
}

// NtfTerrainCollapse 地形坍塌
message NtfTerrainCollapse{
  repeated int32 terrainOrder = 1;
}

message S2SWatchingMessage {
  int64 followId = 1;
  int32 Msg_id = 2; //消息号
  bytes Data = 3;
}

// 开始观战
message C2SWatchingBattle {
  int64 followId = 1;
  int32 playId = 2; // 玩法id
}

// 开始观战响应
message S2CWatchingBattle {
  int32 err_code = 1;
  int64 followId = 2;
  int32 mapId = 3; // 地图配置id
  int32 playId = 4; // 玩法id
}

// 停止观战
message C2SStopWatchingBattle {

}

// 停止观战响应
message S2CStopWatchingBattle {
  ScenePlayer player = 1;
}

// 观战准备就绪
message C2SWatchingBattlePrepared{

}

// 观战准备就绪响应
message S2CWatchingBattlePrepared{
  int32 err_code = 1;
}

// 切换观战目标
message C2SChangeWatchingTarget {
  int64 followId = 1;
}

message S2CChangeWatchingTarget {
  int64 followId = 1;
}

message NtfChangeWatchingTarget{
  int64 followId = 1;
}

message NtfWatchingGamePlayerInit {
  repeated NtfPlayerEnterEyeshot playerEnterShot = 1;
  repeated NtfUnitEnterEyeshot unitEnterShot = 2;
  repeated NtfMonsterEnterEyeshot monsterEnterShot = 3;
}

// 通知客户端停止观战
message NtfStopWatching{
  ScenePlayer player = 1;
}

// 玩家各种属性
message PlayerProperties {
  int64 playerId = 1 ;           // playerID
  map<int32, int32> attributes = 2; // 属性值 (speed/hp/maxHp)
  map<int32, Buff> buffs = 3; // buff集合
  int32 changeIndex = 4;

}

// 玩家属性
message NtfPlayerProperties {
  repeated PlayerProperties playerProperties = 1 ;
}

message C2SRandomMove {
  int32 radius = 1;
}

message  S2CRandomMove {

}

// 立即复活
message C2SReviveImmediately {
}

message S2CReviveImmediately {
  int32 err_code = 1;
}

message NtfNpcDialogue {
  int64 unitId = 1;
  string i18nKey = 2;
}