syntax = "proto3";
package room;

option go_package = "room/api;roompb";

message Vector {
  int32 x = 1;
  int32 y = 2;
  int32 z = 3;
}

enum RoleState {
  State_None = 0;
  State_Stun = 1; // stun：昏迷：无法主动移动或使用主动技能，但可以被动移动和触发被动技能；
  State_Hold = 2; // hold：举起：无法使用投掷一些外的技能
  State_Behold = 4; // behold：被举起：无法施放摆脱以外的技能，被举在头顶，隐藏血条，无法被选作目标，无敌
  State_Charge = 8; // charge：冲锋：不可停止移动，即使摇杆没有方向也会以允许的最快速度向默认方向前进。
  State_Anklet = 16; // anklet：脚镣：不可主动移动，但可以被动移动。
  State_Shackled = 32; // shackled：束缚：不可主动或被动移动。
  State_Silence = 64; // silence：沉默：不可以使用主动技能，但可以触发被动技能
  State_Frozen = 128; // frozen：冻结：无法主动移动或使用主动技能和被动技能，但可以被动移动，并且摩擦力变为0.
  State_Invincible = 256; // invincible：无敌：不会受到任何伤害。
  State_Untargetable = 512; // untargetable：不可被选做目标
  State_Fly = 1024; // fly：击飞
}

message SceneItem {
  int32 item_id = 1; //道具id
  int32 item_type = 2; //道具类型
  int32 item_count = 3; //道具数量
  int32 pos_index = 4; // 位置索引
  int64 drop_id = 5; //掉落物uid
  bool is_visible = 6; //是否可见
}

message Skill {
  int64 owner = 1; // 所有者
  int32 index = 2; // 技能序列号
  int32 cid = 3; // 技能配置id
  Vector self_pos = 4; // 自身位置
  Vector target_pos = 5; // 目标位置，当技能类型为方向技能时需要传入
  int64 target_id = 6; // 玩家目标id，当技能类型为锁定目标时需要传入
  Vector shift = 7; // 位移终点坐标
}

message Buff {
  int32 id = 1; // buff id
  int32 duration = 2; // 持续时间(ms)
  int32 overlay = 3; // 叠加层数
}

message RoomRole {
  message DeadInfo {
    int64 dead_from = 1; //死亡来源
    int32 dead_time = 2; //复活剩余时间ms
  }

  int64 uid = 1;
  string nickname = 2; // 昵称
  int32 hero_id = 3; // 英雄id
  int32 hp = 4; // 血量
  int32 max_hp = 5; // 最大血量
  int32 speed = 6; // 速度
  Vector direction = 7; // 方向
  Vector pos = 8; // 坐标
  map<int32, bool> state = 9; // 状态 参考: RoleState
  int32 hero_mastery_exp = 10; // 英雄熟练度
  int32 group_id = 11; // 阵营id
  DeadInfo dead_info = 12; //死亡信息
  bool is_robot = 13; //是否是机器人
  map<int32, Buff> buffs = 14; //buff列表
}

message Range {
  int32 type = 1; // 1:圆形 2:矩形 3:扇形
  int32 radius = 2; // 半径
  int32 width = 3; // 宽度
  int32 height = 4; // 高度
  int32 angle = 5; // 角度
}

message Item {
  int64 id = 1; //唯一id
  int32 type_id = 2; // 类型
  int32 num = 3; // 数量
  int64 expired = 4; // 过期时间
}
message Items {
  map<int64, Item> items = 1;
}

message RoleResult {
  int64 uid = 1; //玩家UID
  int32 kill_count = 2; //击杀数
  int32 assist_count = 3; //助攻数
  int32 death_count = 4; //死亡数
  int32 total_damage = 5; //总伤害
  int32 total_heal = 6; //总治疗
  int32 mvp_score = 7; //最终积分
  bool is_mvp = 8; //是否是mvp
  Items rewards = 9; //道具奖励
}
