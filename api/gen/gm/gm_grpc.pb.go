// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: gm/gm.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GMService_WatchGM_FullMethodName            = "/gm.pb.GMService/WatchGM"
	GMService_GetBlockedUserInfo_FullMethodName = "/gm.pb.GMService/GetBlockedUserInfo"
	GMService_SendMail_FullMethodName           = "/gm.pb.GMService/SendMail"
	GMService_GetPlayerInfoList_FullMethodName  = "/gm.pb.GMService/GetPlayerInfoList"
	GMService_GetPlayerInfo_FullMethodName      = "/gm.pb.GMService/GetPlayerInfo"
	GMService_QueryUserList_FullMethodName      = "/gm.pb.GMService/QueryUserList"
	GMService_PlayerBannedList_FullMethodName   = "/gm.pb.GMService/PlayerBannedList"
	GMService_PlayerBanned_FullMethodName       = "/gm.pb.GMService/PlayerBanned"
	GMService_KickOffline_FullMethodName        = "/gm.pb.GMService/KickOffline"
)

// GMServiceClient is the client API for GMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GMServiceClient interface {
	// watch block list
	WatchGM(ctx context.Context, in *WatchGMRequest, opts ...grpc.CallOption) (GMService_WatchGMClient, error)
	// get blocked user info
	GetBlockedUserInfo(ctx context.Context, in *GetBlockedUserInfoRequest, opts ...grpc.CallOption) (*GetBlockedUserInfoResponse, error)
	SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error)
	GetPlayerInfoList(ctx context.Context, in *GetPlayerInfoListRequest, opts ...grpc.CallOption) (*GetPlayerInfoListResponse, error)
	GetPlayerInfo(ctx context.Context, in *GetPlayerInfoRequest, opts ...grpc.CallOption) (*GetPlayerInfoResponse, error)
	QueryUserList(ctx context.Context, in *QueryUserListRequest, opts ...grpc.CallOption) (*QueryUserListResponse, error)
	// 获取玩家黑名单
	PlayerBannedList(ctx context.Context, in *PlayerBannedListRequest, opts ...grpc.CallOption) (*PlayerBannedListResponse, error)
	// 玩家封禁
	PlayerBanned(ctx context.Context, in *PlayerBannedRequest, opts ...grpc.CallOption) (*PlayerBannedResponse, error)
	// 踢下线
	KickOffline(ctx context.Context, in *KickOfflineRequest, opts ...grpc.CallOption) (*KickOfflineResponse, error)
}

type gMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGMServiceClient(cc grpc.ClientConnInterface) GMServiceClient {
	return &gMServiceClient{cc}
}

func (c *gMServiceClient) WatchGM(ctx context.Context, in *WatchGMRequest, opts ...grpc.CallOption) (GMService_WatchGMClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GMService_ServiceDesc.Streams[0], GMService_WatchGM_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gMServiceWatchGMClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GMService_WatchGMClient interface {
	Recv() (*WatchGMResponse, error)
	grpc.ClientStream
}

type gMServiceWatchGMClient struct {
	grpc.ClientStream
}

func (x *gMServiceWatchGMClient) Recv() (*WatchGMResponse, error) {
	m := new(WatchGMResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gMServiceClient) GetBlockedUserInfo(ctx context.Context, in *GetBlockedUserInfoRequest, opts ...grpc.CallOption) (*GetBlockedUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockedUserInfoResponse)
	err := c.cc.Invoke(ctx, GMService_GetBlockedUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMServiceClient) SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*SendMailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMailResponse)
	err := c.cc.Invoke(ctx, GMService_SendMail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMServiceClient) GetPlayerInfoList(ctx context.Context, in *GetPlayerInfoListRequest, opts ...grpc.CallOption) (*GetPlayerInfoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerInfoListResponse)
	err := c.cc.Invoke(ctx, GMService_GetPlayerInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMServiceClient) GetPlayerInfo(ctx context.Context, in *GetPlayerInfoRequest, opts ...grpc.CallOption) (*GetPlayerInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerInfoResponse)
	err := c.cc.Invoke(ctx, GMService_GetPlayerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMServiceClient) QueryUserList(ctx context.Context, in *QueryUserListRequest, opts ...grpc.CallOption) (*QueryUserListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserListResponse)
	err := c.cc.Invoke(ctx, GMService_QueryUserList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMServiceClient) PlayerBannedList(ctx context.Context, in *PlayerBannedListRequest, opts ...grpc.CallOption) (*PlayerBannedListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerBannedListResponse)
	err := c.cc.Invoke(ctx, GMService_PlayerBannedList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMServiceClient) PlayerBanned(ctx context.Context, in *PlayerBannedRequest, opts ...grpc.CallOption) (*PlayerBannedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerBannedResponse)
	err := c.cc.Invoke(ctx, GMService_PlayerBanned_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gMServiceClient) KickOffline(ctx context.Context, in *KickOfflineRequest, opts ...grpc.CallOption) (*KickOfflineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KickOfflineResponse)
	err := c.cc.Invoke(ctx, GMService_KickOffline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GMServiceServer is the server API for GMService service.
// All implementations should embed UnimplementedGMServiceServer
// for forward compatibility
type GMServiceServer interface {
	// watch block list
	WatchGM(*WatchGMRequest, GMService_WatchGMServer) error
	// get blocked user info
	GetBlockedUserInfo(context.Context, *GetBlockedUserInfoRequest) (*GetBlockedUserInfoResponse, error)
	SendMail(context.Context, *SendMailRequest) (*SendMailResponse, error)
	GetPlayerInfoList(context.Context, *GetPlayerInfoListRequest) (*GetPlayerInfoListResponse, error)
	GetPlayerInfo(context.Context, *GetPlayerInfoRequest) (*GetPlayerInfoResponse, error)
	QueryUserList(context.Context, *QueryUserListRequest) (*QueryUserListResponse, error)
	// 获取玩家黑名单
	PlayerBannedList(context.Context, *PlayerBannedListRequest) (*PlayerBannedListResponse, error)
	// 玩家封禁
	PlayerBanned(context.Context, *PlayerBannedRequest) (*PlayerBannedResponse, error)
	// 踢下线
	KickOffline(context.Context, *KickOfflineRequest) (*KickOfflineResponse, error)
}

// UnimplementedGMServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGMServiceServer struct {
}

func (UnimplementedGMServiceServer) WatchGM(*WatchGMRequest, GMService_WatchGMServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchGM not implemented")
}
func (UnimplementedGMServiceServer) GetBlockedUserInfo(context.Context, *GetBlockedUserInfoRequest) (*GetBlockedUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockedUserInfo not implemented")
}
func (UnimplementedGMServiceServer) SendMail(context.Context, *SendMailRequest) (*SendMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedGMServiceServer) GetPlayerInfoList(context.Context, *GetPlayerInfoListRequest) (*GetPlayerInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerInfoList not implemented")
}
func (UnimplementedGMServiceServer) GetPlayerInfo(context.Context, *GetPlayerInfoRequest) (*GetPlayerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerInfo not implemented")
}
func (UnimplementedGMServiceServer) QueryUserList(context.Context, *QueryUserListRequest) (*QueryUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserList not implemented")
}
func (UnimplementedGMServiceServer) PlayerBannedList(context.Context, *PlayerBannedListRequest) (*PlayerBannedListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerBannedList not implemented")
}
func (UnimplementedGMServiceServer) PlayerBanned(context.Context, *PlayerBannedRequest) (*PlayerBannedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerBanned not implemented")
}
func (UnimplementedGMServiceServer) KickOffline(context.Context, *KickOfflineRequest) (*KickOfflineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickOffline not implemented")
}

// UnsafeGMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GMServiceServer will
// result in compilation errors.
type UnsafeGMServiceServer interface {
	mustEmbedUnimplementedGMServiceServer()
}

func RegisterGMServiceServer(s grpc.ServiceRegistrar, srv GMServiceServer) {
	s.RegisterService(&GMService_ServiceDesc, srv)
}

func _GMService_WatchGM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchGMRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GMServiceServer).WatchGM(m, &gMServiceWatchGMServer{ServerStream: stream})
}

type GMService_WatchGMServer interface {
	Send(*WatchGMResponse) error
	grpc.ServerStream
}

type gMServiceWatchGMServer struct {
	grpc.ServerStream
}

func (x *gMServiceWatchGMServer) Send(m *WatchGMResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GMService_GetBlockedUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockedUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).GetBlockedUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GMService_GetBlockedUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).GetBlockedUserInfo(ctx, req.(*GetBlockedUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMService_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GMService_SendMail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).SendMail(ctx, req.(*SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMService_GetPlayerInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).GetPlayerInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GMService_GetPlayerInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).GetPlayerInfoList(ctx, req.(*GetPlayerInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMService_GetPlayerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).GetPlayerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GMService_GetPlayerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).GetPlayerInfo(ctx, req.(*GetPlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMService_QueryUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).QueryUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GMService_QueryUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).QueryUserList(ctx, req.(*QueryUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMService_PlayerBannedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerBannedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).PlayerBannedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GMService_PlayerBannedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).PlayerBannedList(ctx, req.(*PlayerBannedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMService_PlayerBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerBannedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).PlayerBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GMService_PlayerBanned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).PlayerBanned(ctx, req.(*PlayerBannedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GMService_KickOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOfflineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GMServiceServer).KickOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GMService_KickOffline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GMServiceServer).KickOffline(ctx, req.(*KickOfflineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GMService_ServiceDesc is the grpc.ServiceDesc for GMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gm.pb.GMService",
	HandlerType: (*GMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockedUserInfo",
			Handler:    _GMService_GetBlockedUserInfo_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _GMService_SendMail_Handler,
		},
		{
			MethodName: "GetPlayerInfoList",
			Handler:    _GMService_GetPlayerInfoList_Handler,
		},
		{
			MethodName: "GetPlayerInfo",
			Handler:    _GMService_GetPlayerInfo_Handler,
		},
		{
			MethodName: "QueryUserList",
			Handler:    _GMService_QueryUserList_Handler,
		},
		{
			MethodName: "PlayerBannedList",
			Handler:    _GMService_PlayerBannedList_Handler,
		},
		{
			MethodName: "PlayerBanned",
			Handler:    _GMService_PlayerBanned_Handler,
		},
		{
			MethodName: "KickOffline",
			Handler:    _GMService_KickOffline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchGM",
			Handler:       _GMService_WatchGM_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gm/gm.proto",
}
