// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: bff/bcommon.proto

package bffpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Platform int32

const (
	Platform_Platform_None       Platform = 0
	Platform_Platform_AppStore   Platform = 1 // AppStore
	Platform_Platform_GooglePlay Platform = 2 // GooglePlay
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "Platform_None",
		1: "Platform_AppStore",
		2: "Platform_GooglePlay",
	}
	Platform_value = map[string]int32{
		"Platform_None":       0,
		"Platform_AppStore":   1,
		"Platform_GooglePlay": 2,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_bff_bcommon_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_bff_bcommon_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{0}
}

type ItemType int32

const (
	ItemType_None       ItemType = 0
	ItemType_kCoin      ItemType = 1  // 金币
	ItemType_kDiamond   ItemType = 2  // 钻石
	ItemType_kHeroCoin  ItemType = 3  // 英雄币
	ItemType_kBadge     ItemType = 4  // 徽章
	ItemType_kHeroExp   ItemType = 5  // 英雄券
	ItemType_kStar      ItemType = 6  // 段位星星
	ItemType_kPassExp   ItemType = 7  // 通行证经验
	ItemType_kPetFeed   ItemType = 8  // 宠物喂养素材
	ItemType_kPetEgg    ItemType = 9  // 宠物蛋
	ItemType_kSpeedCard ItemType = 10 // 加速卡
	ItemType_kHero      ItemType = 11 // 英雄
	ItemType_kPetStone  ItemType = 12 // 技能石
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0:  "None",
		1:  "kCoin",
		2:  "kDiamond",
		3:  "kHeroCoin",
		4:  "kBadge",
		5:  "kHeroExp",
		6:  "kStar",
		7:  "kPassExp",
		8:  "kPetFeed",
		9:  "kPetEgg",
		10: "kSpeedCard",
		11: "kHero",
		12: "kPetStone",
	}
	ItemType_value = map[string]int32{
		"None":       0,
		"kCoin":      1,
		"kDiamond":   2,
		"kHeroCoin":  3,
		"kBadge":     4,
		"kHeroExp":   5,
		"kStar":      6,
		"kPassExp":   7,
		"kPetFeed":   8,
		"kPetEgg":    9,
		"kSpeedCard": 10,
		"kHero":      11,
		"kPetStone":  12,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_bff_bcommon_proto_enumTypes[1].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_bff_bcommon_proto_enumTypes[1]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{1}
}

// 组队状态
type GroupType int32

const (
	GroupType_GROUP_WAIT  GroupType = 0 //等待
	GroupType_GROUP_fight GroupType = 1 //战斗
)

// Enum value maps for GroupType.
var (
	GroupType_name = map[int32]string{
		0: "GROUP_WAIT",
		1: "GROUP_fight",
	}
	GroupType_value = map[string]int32{
		"GROUP_WAIT":  0,
		"GROUP_fight": 1,
	}
)

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_bff_bcommon_proto_enumTypes[2].Descriptor()
}

func (GroupType) Type() protoreflect.EnumType {
	return &file_bff_bcommon_proto_enumTypes[2]
}

func (x GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupType.Descriptor instead.
func (GroupType) EnumDescriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{2}
}

// 队伍信息
type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupUid   int64          `protobuf:"varint,1,opt,name=groupUid,proto3" json:"groupUid,omitempty"`
	CreateUid  int64          `protobuf:"varint,2,opt,name=createUid,proto3" json:"createUid,omitempty"`                                                                                            //创建者id(队长id)
	CreateTime int64          `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`                                                                                          //创建时间
	Members    []int64        `protobuf:"varint,4,rep,packed,name=members,proto3" json:"members,omitempty"`                                                                                         //成员id列表
	GroupState int32          `protobuf:"varint,5,opt,name=groupState,proto3" json:"groupState,omitempty"`                                                                                          //队伍状态
	GroupCode  string         `protobuf:"bytes,6,opt,name=groupCode,proto3" json:"groupCode,omitempty"`                                                                                             //队伍code
	MatchReady map[int64]bool `protobuf:"bytes,7,rep,name=matchReady,proto3" json:"matchReady,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //队员准备状态
	PlayMap    int32          `protobuf:"varint,8,opt,name=playMap,proto3" json:"playMap,omitempty"`                                                                                                //玩法id
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bff_bcommon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bff_bcommon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{0}
}

func (x *GroupInfo) GetGroupUid() int64 {
	if x != nil {
		return x.GroupUid
	}
	return 0
}

func (x *GroupInfo) GetCreateUid() int64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *GroupInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GroupInfo) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupInfo) GetGroupState() int32 {
	if x != nil {
		return x.GroupState
	}
	return 0
}

func (x *GroupInfo) GetGroupCode() string {
	if x != nil {
		return x.GroupCode
	}
	return ""
}

func (x *GroupInfo) GetMatchReady() map[int64]bool {
	if x != nil {
		return x.MatchReady
	}
	return nil
}

func (x *GroupInfo) GetPlayMap() int32 {
	if x != nil {
		return x.PlayMap
	}
	return 0
}

// 个人队伍信息
type PlayerGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GroupUid int64 `protobuf:"varint,2,opt,name=groupUid,proto3" json:"groupUid,omitempty"`
	//  int32 pLayerGroupState = 3; //个人组队状态（0:无状态,1:有弹窗没有处理，不能被邀请）
	RetCD map[int64]int64 `protobuf:"bytes,3,rep,name=retCD,proto3" json:"retCD,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //发送邀请消息的cd时间(同一被邀请用户不能小于5秒)
	RspCD map[int64]int64 `protobuf:"bytes,4,rep,name=rspCD,proto3" json:"rspCD,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //拒绝cd时间(十分钟内不在接收某用户的邀请)
}

func (x *PlayerGroupInfo) Reset() {
	*x = PlayerGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bff_bcommon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGroupInfo) ProtoMessage() {}

func (x *PlayerGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bff_bcommon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGroupInfo.ProtoReflect.Descriptor instead.
func (*PlayerGroupInfo) Descriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerGroupInfo) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerGroupInfo) GetGroupUid() int64 {
	if x != nil {
		return x.GroupUid
	}
	return 0
}

func (x *PlayerGroupInfo) GetRetCD() map[int64]int64 {
	if x != nil {
		return x.RetCD
	}
	return nil
}

func (x *PlayerGroupInfo) GetRspCD() map[int64]int64 {
	if x != nil {
		return x.RspCD
	}
	return nil
}

// 好友队伍信息
type FriendGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	//  string nickname = 2; //别名
	//  PlayerSimpleInfo info = 3;
	Group   *GroupInfo          `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`     //队伍信息
	GpInfos []*PlayerSimpleInfo `protobuf:"bytes,3,rep,name=gpInfos,proto3" json:"gpInfos,omitempty"` //队伍成员
}

func (x *FriendGroupInfo) Reset() {
	*x = FriendGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bff_bcommon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendGroupInfo) ProtoMessage() {}

func (x *FriendGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bff_bcommon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendGroupInfo.ProtoReflect.Descriptor instead.
func (*FriendGroupInfo) Descriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{2}
}

func (x *FriendGroupInfo) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FriendGroupInfo) GetGroup() *GroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *FriendGroupInfo) GetGpInfos() []*PlayerSimpleInfo {
	if x != nil {
		return x.GpInfos
	}
	return nil
}

// 队伍简要信息
type GroupSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateUid int64   `protobuf:"varint,1,opt,name=createUid,proto3" json:"createUid,omitempty"`    //队长id
	Members   []int64 `protobuf:"varint,2,rep,packed,name=members,proto3" json:"members,omitempty"` //成员id列表
}

func (x *GroupSimpleInfo) Reset() {
	*x = GroupSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bff_bcommon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSimpleInfo) ProtoMessage() {}

func (x *GroupSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bff_bcommon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSimpleInfo.ProtoReflect.Descriptor instead.
func (*GroupSimpleInfo) Descriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{3}
}

func (x *GroupSimpleInfo) GetCreateUid() int64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *GroupSimpleInfo) GetMembers() []int64 {
	if x != nil {
		return x.Members
	}
	return nil
}

// 匹配后队伍信息
type MatchGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos         []*PlayerSimpleInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`                         //成员id列表
	IsRoBot       bool                `protobuf:"varint,2,opt,name=IsRoBot,proto3" json:"IsRoBot,omitempty"`                    // 是否补充机器人
	AddRewardUids []int64             `protobuf:"varint,3,rep,packed,name=addRewardUids,proto3" json:"addRewardUids,omitempty"` //需要增加奖励的成员id
	Gsi           *GroupSimpleInfo    `protobuf:"bytes,4,opt,name=gsi,proto3" json:"gsi,omitempty"`                             //每队最多只有一个队伍信息
}

func (x *MatchGroupInfo) Reset() {
	*x = MatchGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bff_bcommon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchGroupInfo) ProtoMessage() {}

func (x *MatchGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bff_bcommon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchGroupInfo.ProtoReflect.Descriptor instead.
func (*MatchGroupInfo) Descriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{4}
}

func (x *MatchGroupInfo) GetInfos() []*PlayerSimpleInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *MatchGroupInfo) GetIsRoBot() bool {
	if x != nil {
		return x.IsRoBot
	}
	return false
}

func (x *MatchGroupInfo) GetAddRewardUids() []int64 {
	if x != nil {
		return x.AddRewardUids
	}
	return nil
}

func (x *MatchGroupInfo) GetGsi() *GroupSimpleInfo {
	if x != nil {
		return x.Gsi
	}
	return nil
}

// 匹配后房间信息
type MatchRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayMapId int32             `protobuf:"varint,1,opt,name=playMapId,proto3" json:"playMapId,omitempty"` //玩法id
	Groups    []*MatchGroupInfo `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`        //队伍信息
	IsRoBot   bool              `protobuf:"varint,3,opt,name=IsRoBot,proto3" json:"IsRoBot,omitempty"`     // 是否补充机器人队伍
}

func (x *MatchRoomInfo) Reset() {
	*x = MatchRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bff_bcommon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoomInfo) ProtoMessage() {}

func (x *MatchRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bff_bcommon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoomInfo.ProtoReflect.Descriptor instead.
func (*MatchRoomInfo) Descriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{5}
}

func (x *MatchRoomInfo) GetPlayMapId() int32 {
	if x != nil {
		return x.PlayMapId
	}
	return 0
}

func (x *MatchRoomInfo) GetGroups() []*MatchGroupInfo {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *MatchRoomInfo) GetIsRoBot() bool {
	if x != nil {
		return x.IsRoBot
	}
	return false
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             //唯一id
	ConfigId int32 `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"` // 类型 config_id
	Num      int32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`                           // 数量
	Expired  int64 `protobuf:"varint,4,opt,name=expired,proto3" json:"expired,omitempty"`                   // 过期时间
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bff_bcommon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_bff_bcommon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{6}
}

func (x *Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetConfigId() int32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *Item) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Item) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

type Items struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[int64]*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Items) Reset() {
	*x = Items{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bff_bcommon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Items) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Items) ProtoMessage() {}

func (x *Items) ProtoReflect() protoreflect.Message {
	mi := &file_bff_bcommon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Items.ProtoReflect.Descriptor instead.
func (*Items) Descriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{7}
}

func (x *Items) GetItems() map[int64]*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// 用户基本信息
type PlayerSimpleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                             //UID
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                            //昵称
	Head          string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`                                            //头像
	Level         int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`                                         //等级
	HeroId        int32  `protobuf:"varint,5,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`                         //英雄ID
	Line          int32  `protobuf:"varint,6,opt,name=line,proto3" json:"line,omitempty"`                                           //分线
	Online        bool   `protobuf:"varint,7,opt,name=online,proto3" json:"online,omitempty"`                                       //是否在线
	State         int32  `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`                                         //状态 0:正常 1:战斗, 2组队
	PartyId       string `protobuf:"bytes,9,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`                       //队伍ID 只有状态为组队时有值
	LastLoginTime int32  `protobuf:"varint,10,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"` //最后登录时间
	HeroCup       int32  `protobuf:"varint,11,opt,name=hero_cup,json=heroCup,proto3" json:"hero_cup,omitempty"`                     // 英雄的总奖杯数 暂时废弃
	PetProfileId  int64  `protobuf:"varint,12,opt,name=pet_profile_id,json=petProfileId,proto3" json:"pet_profile_id,omitempty"`    //宠物外观组合ID 身体  + 帽子 * 10000 + 翅膀*10000^2 + 武器*10000^3
	SkinId        int32  `protobuf:"varint,13,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`                        //皮肤ID
}

func (x *PlayerSimpleInfo) Reset() {
	*x = PlayerSimpleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bff_bcommon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSimpleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSimpleInfo) ProtoMessage() {}

func (x *PlayerSimpleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bff_bcommon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSimpleInfo.ProtoReflect.Descriptor instead.
func (*PlayerSimpleInfo) Descriptor() ([]byte, []int) {
	return file_bff_bcommon_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerSimpleInfo) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerSimpleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerSimpleInfo) GetHead() string {
	if x != nil {
		return x.Head
	}
	return ""
}

func (x *PlayerSimpleInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerSimpleInfo) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *PlayerSimpleInfo) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *PlayerSimpleInfo) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *PlayerSimpleInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PlayerSimpleInfo) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

func (x *PlayerSimpleInfo) GetLastLoginTime() int32 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *PlayerSimpleInfo) GetHeroCup() int32 {
	if x != nil {
		return x.HeroCup
	}
	return 0
}

func (x *PlayerSimpleInfo) GetPetProfileId() int64 {
	if x != nil {
		return x.PetProfileId
	}
	return 0
}

func (x *PlayerSimpleInfo) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

var File_bff_bcommon_proto protoreflect.FileDescriptor

var file_bff_bcommon_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x66, 0x66, 0x2f, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x62, 0x66, 0x66, 0x22, 0xd6, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x4d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x4d,
	0x61, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa1, 0x02, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x43, 0x44, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x74, 0x43, 0x44, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x65, 0x74, 0x43, 0x44, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x73,
	0x70, 0x43, 0x44, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x52, 0x73, 0x70, 0x43, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x73, 0x70, 0x43,
	0x44, 0x1a, 0x38, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x43, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x52,
	0x73, 0x70, 0x43, 0x44, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x0f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x2f, 0x0a, 0x07, 0x67, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x67, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x49, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xa5, 0x01, 0x0a,
	0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2b, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x52, 0x6f, 0x42, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x52, 0x6f, 0x42, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x03,
	0x67, 0x73, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x03, 0x67, 0x73, 0x69, 0x22, 0x74, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61,
	0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x52, 0x6f, 0x42, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x49, 0x73, 0x52, 0x6f, 0x42, 0x6f, 0x74, 0x22, 0x5f, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0x79, 0x0a, 0x05, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x43, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x02, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x63, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x65, 0x72,
	0x6f, 0x43, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x2a, 0x4d, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x10, 0x02, 0x2a, 0xb4, 0x01, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x6b, 0x43, 0x6f,
	0x69, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x48, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x69, 0x6e, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x42, 0x61, 0x64, 0x67, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x6b, 0x48, 0x65, 0x72, 0x6f, 0x45, 0x78, 0x70, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x6b,
	0x53, 0x74, 0x61, 0x72, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x45,
	0x78, 0x70, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x50, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64,
	0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x50, 0x65, 0x74, 0x45, 0x67, 0x67, 0x10, 0x09, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x10, 0x0a, 0x12,
	0x09, 0x0a, 0x05, 0x6b, 0x48, 0x65, 0x72, 0x6f, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x50,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0x0c, 0x2a, 0x2c, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x62, 0x66, 0x66, 0x2f, 0x3b,
	0x62, 0x66, 0x66, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bff_bcommon_proto_rawDescOnce sync.Once
	file_bff_bcommon_proto_rawDescData = file_bff_bcommon_proto_rawDesc
)

func file_bff_bcommon_proto_rawDescGZIP() []byte {
	file_bff_bcommon_proto_rawDescOnce.Do(func() {
		file_bff_bcommon_proto_rawDescData = protoimpl.X.CompressGZIP(file_bff_bcommon_proto_rawDescData)
	})
	return file_bff_bcommon_proto_rawDescData
}

var file_bff_bcommon_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bff_bcommon_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_bff_bcommon_proto_goTypes = []any{
	(Platform)(0),            // 0: bff.Platform
	(ItemType)(0),            // 1: bff.ItemType
	(GroupType)(0),           // 2: bff.GroupType
	(*GroupInfo)(nil),        // 3: bff.GroupInfo
	(*PlayerGroupInfo)(nil),  // 4: bff.PlayerGroupInfo
	(*FriendGroupInfo)(nil),  // 5: bff.FriendGroupInfo
	(*GroupSimpleInfo)(nil),  // 6: bff.GroupSimpleInfo
	(*MatchGroupInfo)(nil),   // 7: bff.MatchGroupInfo
	(*MatchRoomInfo)(nil),    // 8: bff.MatchRoomInfo
	(*Item)(nil),             // 9: bff.Item
	(*Items)(nil),            // 10: bff.Items
	(*PlayerSimpleInfo)(nil), // 11: bff.PlayerSimpleInfo
	nil,                      // 12: bff.GroupInfo.MatchReadyEntry
	nil,                      // 13: bff.PlayerGroupInfo.RetCDEntry
	nil,                      // 14: bff.PlayerGroupInfo.RspCDEntry
	nil,                      // 15: bff.Items.ItemsEntry
}
var file_bff_bcommon_proto_depIdxs = []int32{
	12, // 0: bff.GroupInfo.matchReady:type_name -> bff.GroupInfo.MatchReadyEntry
	13, // 1: bff.PlayerGroupInfo.retCD:type_name -> bff.PlayerGroupInfo.RetCDEntry
	14, // 2: bff.PlayerGroupInfo.rspCD:type_name -> bff.PlayerGroupInfo.RspCDEntry
	3,  // 3: bff.FriendGroupInfo.group:type_name -> bff.GroupInfo
	11, // 4: bff.FriendGroupInfo.gpInfos:type_name -> bff.PlayerSimpleInfo
	11, // 5: bff.MatchGroupInfo.infos:type_name -> bff.PlayerSimpleInfo
	6,  // 6: bff.MatchGroupInfo.gsi:type_name -> bff.GroupSimpleInfo
	7,  // 7: bff.MatchRoomInfo.groups:type_name -> bff.MatchGroupInfo
	15, // 8: bff.Items.items:type_name -> bff.Items.ItemsEntry
	9,  // 9: bff.Items.ItemsEntry.value:type_name -> bff.Item
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_bff_bcommon_proto_init() }
func file_bff_bcommon_proto_init() {
	if File_bff_bcommon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bff_bcommon_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bff_bcommon_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bff_bcommon_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FriendGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bff_bcommon_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GroupSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bff_bcommon_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MatchGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bff_bcommon_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bff_bcommon_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bff_bcommon_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Items); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bff_bcommon_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerSimpleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bff_bcommon_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bff_bcommon_proto_goTypes,
		DependencyIndexes: file_bff_bcommon_proto_depIdxs,
		EnumInfos:         file_bff_bcommon_proto_enumTypes,
		MessageInfos:      file_bff_bcommon_proto_msgTypes,
	}.Build()
	File_bff_bcommon_proto = out.File
	file_bff_bcommon_proto_rawDesc = nil
	file_bff_bcommon_proto_goTypes = nil
	file_bff_bcommon_proto_depIdxs = nil
}
