// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: cashbattle/cashbattle.proto

package cashbattle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CashBattleService_GetCashBattle_FullMethodName            = "/cashbattle.CashBattleService/GetCashBattle"
	CashBattleService_GetCashBattleVersus_FullMethodName      = "/cashbattle.CashBattleService/GetCashBattleVersus"
	CashBattleService_GetCashBattleGuess_FullMethodName       = "/cashbattle.CashBattleService/GetCashBattleGuess"
	CashBattleService_JoinCashBattle_FullMethodName           = "/cashbattle.CashBattleService/JoinCashBattle"
	CashBattleService_ConfirmCashBattle_FullMethodName        = "/cashbattle.CashBattleService/ConfirmCashBattle"
	CashBattleService_StakeCashBattle_FullMethodName          = "/cashbattle.CashBattleService/StakeCashBattle"
	CashBattleService_IsPlayerJoin_FullMethodName             = "/cashbattle.CashBattleService/IsPlayerJoin"
	CashBattleService_IsPlayerBeSelected_FullMethodName       = "/cashbattle.CashBattleService/IsPlayerBeSelected"
	CashBattleService_IsPlayerConfirm_FullMethodName          = "/cashbattle.CashBattleService/IsPlayerConfirm"
	CashBattleService_GetCashBattleCondition_FullMethodName   = "/cashbattle.CashBattleService/GetCashBattleCondition"
	CashBattleService_SelectBattleHero_FullMethodName         = "/cashbattle.CashBattleService/SelectBattleHero"
	CashBattleService_GetCashBattleStartTime_FullMethodName   = "/cashbattle.CashBattleService/GetCashBattleStartTime"
	CashBattleService_WatchCashBattle_FullMethodName          = "/cashbattle.CashBattleService/WatchCashBattle"
	CashBattleService_BattleResult_FullMethodName             = "/cashbattle.CashBattleService/BattleResult"
	CashBattleService_CashBattleGratuity_FullMethodName       = "/cashbattle.CashBattleService/CashBattleGratuity"
	CashBattleService_PubCashBattleInfo_FullMethodName        = "/cashbattle.CashBattleService/PubCashBattleInfo"
	CashBattleService_PubCashBattleVersus_FullMethodName      = "/cashbattle.CashBattleService/PubCashBattleVersus"
	CashBattleService_PubCashBattleCoe_FullMethodName         = "/cashbattle.CashBattleService/PubCashBattleCoe"
	CashBattleService_GetCashBattleVersusMatch_FullMethodName = "/cashbattle.CashBattleService/GetCashBattleVersusMatch"
	CashBattleService_GetCashBattleResult_FullMethodName      = "/cashbattle.CashBattleService/GetCashBattleResult"
	CashBattleService_SettleCashBattleReward_FullMethodName   = "/cashbattle.CashBattleService/SettleCashBattleReward"
)

// CashBattleServiceClient is the client API for CashBattleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CashBattleServiceClient interface {
	GetCashBattle(ctx context.Context, in *GetCashBattleRequest, opts ...grpc.CallOption) (*GetCashBattleResponse, error)
	GetCashBattleVersus(ctx context.Context, in *GetCashBattleVersusRequest, opts ...grpc.CallOption) (*GetCashBattleVersusResponse, error)
	GetCashBattleGuess(ctx context.Context, in *GetCashBattleGuessRequest, opts ...grpc.CallOption) (*GetCashBattleGuessResponse, error)
	JoinCashBattle(ctx context.Context, in *JoinCashBattleRequest, opts ...grpc.CallOption) (*JoinCashBattleResponse, error)
	ConfirmCashBattle(ctx context.Context, in *ConfirmCashBattleRequest, opts ...grpc.CallOption) (*ConfirmCashBattleResponse, error)
	StakeCashBattle(ctx context.Context, in *StakeCashBattleRequest, opts ...grpc.CallOption) (*StakeCashBattleResponse, error)
	IsPlayerJoin(ctx context.Context, in *IsPlayerJoinRequest, opts ...grpc.CallOption) (*IsPlayerJoinResponse, error)
	IsPlayerBeSelected(ctx context.Context, in *IsPlayerBeSelectedRequest, opts ...grpc.CallOption) (*IsPlayerBeSelectedResponse, error)
	IsPlayerConfirm(ctx context.Context, in *IsPlayerConfirmRequest, opts ...grpc.CallOption) (*IsPlayerConfirmResponse, error)
	GetCashBattleCondition(ctx context.Context, in *GetCashBattleConditionRequest, opts ...grpc.CallOption) (*GetCashBattleConditionResponse, error)
	SelectBattleHero(ctx context.Context, in *SelectBattleHeroRequest, opts ...grpc.CallOption) (*SelectBattleHeroResponse, error)
	GetCashBattleStartTime(ctx context.Context, in *GetCashBattleStartTimeRequest, opts ...grpc.CallOption) (*GetCashBattleStartTimeResponse, error)
	WatchCashBattle(ctx context.Context, in *WatchCashBattleRequest, opts ...grpc.CallOption) (CashBattleService_WatchCashBattleClient, error)
	BattleResult(ctx context.Context, in *BattleResultRequest, opts ...grpc.CallOption) (*BattleResultResponse, error)
	CashBattleGratuity(ctx context.Context, in *CashBattleGratuityRequest, opts ...grpc.CallOption) (*CashBattleGratuityResponse, error)
	// ************************************************GM Service请求用********************************************************************//
	PubCashBattleInfo(ctx context.Context, in *PubCashBattleInfoRequest, opts ...grpc.CallOption) (*PubCashBattleInfoResponse, error)
	PubCashBattleVersus(ctx context.Context, in *PubCashBattleVersusRequest, opts ...grpc.CallOption) (*PubCashBattleVersusResponse, error)
	PubCashBattleCoe(ctx context.Context, in *PubCashBattleCoeRequest, opts ...grpc.CallOption) (*PubCashBattleCoeResponse, error)
	GetCashBattleVersusMatch(ctx context.Context, in *GetCashBattleVersusMatchRequest, opts ...grpc.CallOption) (*GetCashBattleVersusMatchResponse, error)
	GetCashBattleResult(ctx context.Context, in *GetCashBattleResultRequest, opts ...grpc.CallOption) (*GetCashBattleResultResponse, error)
	SettleCashBattleReward(ctx context.Context, in *SettleCashBattleRewardRequest, opts ...grpc.CallOption) (*SettleCashBattleRewardResponse, error)
}

type cashBattleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCashBattleServiceClient(cc grpc.ClientConnInterface) CashBattleServiceClient {
	return &cashBattleServiceClient{cc}
}

func (c *cashBattleServiceClient) GetCashBattle(ctx context.Context, in *GetCashBattleRequest, opts ...grpc.CallOption) (*GetCashBattleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCashBattleResponse)
	err := c.cc.Invoke(ctx, CashBattleService_GetCashBattle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) GetCashBattleVersus(ctx context.Context, in *GetCashBattleVersusRequest, opts ...grpc.CallOption) (*GetCashBattleVersusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCashBattleVersusResponse)
	err := c.cc.Invoke(ctx, CashBattleService_GetCashBattleVersus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) GetCashBattleGuess(ctx context.Context, in *GetCashBattleGuessRequest, opts ...grpc.CallOption) (*GetCashBattleGuessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCashBattleGuessResponse)
	err := c.cc.Invoke(ctx, CashBattleService_GetCashBattleGuess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) JoinCashBattle(ctx context.Context, in *JoinCashBattleRequest, opts ...grpc.CallOption) (*JoinCashBattleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinCashBattleResponse)
	err := c.cc.Invoke(ctx, CashBattleService_JoinCashBattle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) ConfirmCashBattle(ctx context.Context, in *ConfirmCashBattleRequest, opts ...grpc.CallOption) (*ConfirmCashBattleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmCashBattleResponse)
	err := c.cc.Invoke(ctx, CashBattleService_ConfirmCashBattle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) StakeCashBattle(ctx context.Context, in *StakeCashBattleRequest, opts ...grpc.CallOption) (*StakeCashBattleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StakeCashBattleResponse)
	err := c.cc.Invoke(ctx, CashBattleService_StakeCashBattle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) IsPlayerJoin(ctx context.Context, in *IsPlayerJoinRequest, opts ...grpc.CallOption) (*IsPlayerJoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsPlayerJoinResponse)
	err := c.cc.Invoke(ctx, CashBattleService_IsPlayerJoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) IsPlayerBeSelected(ctx context.Context, in *IsPlayerBeSelectedRequest, opts ...grpc.CallOption) (*IsPlayerBeSelectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsPlayerBeSelectedResponse)
	err := c.cc.Invoke(ctx, CashBattleService_IsPlayerBeSelected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) IsPlayerConfirm(ctx context.Context, in *IsPlayerConfirmRequest, opts ...grpc.CallOption) (*IsPlayerConfirmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsPlayerConfirmResponse)
	err := c.cc.Invoke(ctx, CashBattleService_IsPlayerConfirm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) GetCashBattleCondition(ctx context.Context, in *GetCashBattleConditionRequest, opts ...grpc.CallOption) (*GetCashBattleConditionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCashBattleConditionResponse)
	err := c.cc.Invoke(ctx, CashBattleService_GetCashBattleCondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) SelectBattleHero(ctx context.Context, in *SelectBattleHeroRequest, opts ...grpc.CallOption) (*SelectBattleHeroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectBattleHeroResponse)
	err := c.cc.Invoke(ctx, CashBattleService_SelectBattleHero_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) GetCashBattleStartTime(ctx context.Context, in *GetCashBattleStartTimeRequest, opts ...grpc.CallOption) (*GetCashBattleStartTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCashBattleStartTimeResponse)
	err := c.cc.Invoke(ctx, CashBattleService_GetCashBattleStartTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) WatchCashBattle(ctx context.Context, in *WatchCashBattleRequest, opts ...grpc.CallOption) (CashBattleService_WatchCashBattleClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CashBattleService_ServiceDesc.Streams[0], CashBattleService_WatchCashBattle_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &cashBattleServiceWatchCashBattleClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CashBattleService_WatchCashBattleClient interface {
	Recv() (*WatchCashBattleResponse, error)
	grpc.ClientStream
}

type cashBattleServiceWatchCashBattleClient struct {
	grpc.ClientStream
}

func (x *cashBattleServiceWatchCashBattleClient) Recv() (*WatchCashBattleResponse, error) {
	m := new(WatchCashBattleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cashBattleServiceClient) BattleResult(ctx context.Context, in *BattleResultRequest, opts ...grpc.CallOption) (*BattleResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BattleResultResponse)
	err := c.cc.Invoke(ctx, CashBattleService_BattleResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) CashBattleGratuity(ctx context.Context, in *CashBattleGratuityRequest, opts ...grpc.CallOption) (*CashBattleGratuityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CashBattleGratuityResponse)
	err := c.cc.Invoke(ctx, CashBattleService_CashBattleGratuity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) PubCashBattleInfo(ctx context.Context, in *PubCashBattleInfoRequest, opts ...grpc.CallOption) (*PubCashBattleInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PubCashBattleInfoResponse)
	err := c.cc.Invoke(ctx, CashBattleService_PubCashBattleInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) PubCashBattleVersus(ctx context.Context, in *PubCashBattleVersusRequest, opts ...grpc.CallOption) (*PubCashBattleVersusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PubCashBattleVersusResponse)
	err := c.cc.Invoke(ctx, CashBattleService_PubCashBattleVersus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) PubCashBattleCoe(ctx context.Context, in *PubCashBattleCoeRequest, opts ...grpc.CallOption) (*PubCashBattleCoeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PubCashBattleCoeResponse)
	err := c.cc.Invoke(ctx, CashBattleService_PubCashBattleCoe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) GetCashBattleVersusMatch(ctx context.Context, in *GetCashBattleVersusMatchRequest, opts ...grpc.CallOption) (*GetCashBattleVersusMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCashBattleVersusMatchResponse)
	err := c.cc.Invoke(ctx, CashBattleService_GetCashBattleVersusMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) GetCashBattleResult(ctx context.Context, in *GetCashBattleResultRequest, opts ...grpc.CallOption) (*GetCashBattleResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCashBattleResultResponse)
	err := c.cc.Invoke(ctx, CashBattleService_GetCashBattleResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashBattleServiceClient) SettleCashBattleReward(ctx context.Context, in *SettleCashBattleRewardRequest, opts ...grpc.CallOption) (*SettleCashBattleRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettleCashBattleRewardResponse)
	err := c.cc.Invoke(ctx, CashBattleService_SettleCashBattleReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CashBattleServiceServer is the server API for CashBattleService service.
// All implementations should embed UnimplementedCashBattleServiceServer
// for forward compatibility
type CashBattleServiceServer interface {
	GetCashBattle(context.Context, *GetCashBattleRequest) (*GetCashBattleResponse, error)
	GetCashBattleVersus(context.Context, *GetCashBattleVersusRequest) (*GetCashBattleVersusResponse, error)
	GetCashBattleGuess(context.Context, *GetCashBattleGuessRequest) (*GetCashBattleGuessResponse, error)
	JoinCashBattle(context.Context, *JoinCashBattleRequest) (*JoinCashBattleResponse, error)
	ConfirmCashBattle(context.Context, *ConfirmCashBattleRequest) (*ConfirmCashBattleResponse, error)
	StakeCashBattle(context.Context, *StakeCashBattleRequest) (*StakeCashBattleResponse, error)
	IsPlayerJoin(context.Context, *IsPlayerJoinRequest) (*IsPlayerJoinResponse, error)
	IsPlayerBeSelected(context.Context, *IsPlayerBeSelectedRequest) (*IsPlayerBeSelectedResponse, error)
	IsPlayerConfirm(context.Context, *IsPlayerConfirmRequest) (*IsPlayerConfirmResponse, error)
	GetCashBattleCondition(context.Context, *GetCashBattleConditionRequest) (*GetCashBattleConditionResponse, error)
	SelectBattleHero(context.Context, *SelectBattleHeroRequest) (*SelectBattleHeroResponse, error)
	GetCashBattleStartTime(context.Context, *GetCashBattleStartTimeRequest) (*GetCashBattleStartTimeResponse, error)
	WatchCashBattle(*WatchCashBattleRequest, CashBattleService_WatchCashBattleServer) error
	BattleResult(context.Context, *BattleResultRequest) (*BattleResultResponse, error)
	CashBattleGratuity(context.Context, *CashBattleGratuityRequest) (*CashBattleGratuityResponse, error)
	// ************************************************GM Service请求用********************************************************************//
	PubCashBattleInfo(context.Context, *PubCashBattleInfoRequest) (*PubCashBattleInfoResponse, error)
	PubCashBattleVersus(context.Context, *PubCashBattleVersusRequest) (*PubCashBattleVersusResponse, error)
	PubCashBattleCoe(context.Context, *PubCashBattleCoeRequest) (*PubCashBattleCoeResponse, error)
	GetCashBattleVersusMatch(context.Context, *GetCashBattleVersusMatchRequest) (*GetCashBattleVersusMatchResponse, error)
	GetCashBattleResult(context.Context, *GetCashBattleResultRequest) (*GetCashBattleResultResponse, error)
	SettleCashBattleReward(context.Context, *SettleCashBattleRewardRequest) (*SettleCashBattleRewardResponse, error)
}

// UnimplementedCashBattleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCashBattleServiceServer struct {
}

func (UnimplementedCashBattleServiceServer) GetCashBattle(context.Context, *GetCashBattleRequest) (*GetCashBattleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashBattle not implemented")
}
func (UnimplementedCashBattleServiceServer) GetCashBattleVersus(context.Context, *GetCashBattleVersusRequest) (*GetCashBattleVersusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashBattleVersus not implemented")
}
func (UnimplementedCashBattleServiceServer) GetCashBattleGuess(context.Context, *GetCashBattleGuessRequest) (*GetCashBattleGuessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashBattleGuess not implemented")
}
func (UnimplementedCashBattleServiceServer) JoinCashBattle(context.Context, *JoinCashBattleRequest) (*JoinCashBattleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCashBattle not implemented")
}
func (UnimplementedCashBattleServiceServer) ConfirmCashBattle(context.Context, *ConfirmCashBattleRequest) (*ConfirmCashBattleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmCashBattle not implemented")
}
func (UnimplementedCashBattleServiceServer) StakeCashBattle(context.Context, *StakeCashBattleRequest) (*StakeCashBattleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeCashBattle not implemented")
}
func (UnimplementedCashBattleServiceServer) IsPlayerJoin(context.Context, *IsPlayerJoinRequest) (*IsPlayerJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPlayerJoin not implemented")
}
func (UnimplementedCashBattleServiceServer) IsPlayerBeSelected(context.Context, *IsPlayerBeSelectedRequest) (*IsPlayerBeSelectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPlayerBeSelected not implemented")
}
func (UnimplementedCashBattleServiceServer) IsPlayerConfirm(context.Context, *IsPlayerConfirmRequest) (*IsPlayerConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPlayerConfirm not implemented")
}
func (UnimplementedCashBattleServiceServer) GetCashBattleCondition(context.Context, *GetCashBattleConditionRequest) (*GetCashBattleConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashBattleCondition not implemented")
}
func (UnimplementedCashBattleServiceServer) SelectBattleHero(context.Context, *SelectBattleHeroRequest) (*SelectBattleHeroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBattleHero not implemented")
}
func (UnimplementedCashBattleServiceServer) GetCashBattleStartTime(context.Context, *GetCashBattleStartTimeRequest) (*GetCashBattleStartTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashBattleStartTime not implemented")
}
func (UnimplementedCashBattleServiceServer) WatchCashBattle(*WatchCashBattleRequest, CashBattleService_WatchCashBattleServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchCashBattle not implemented")
}
func (UnimplementedCashBattleServiceServer) BattleResult(context.Context, *BattleResultRequest) (*BattleResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BattleResult not implemented")
}
func (UnimplementedCashBattleServiceServer) CashBattleGratuity(context.Context, *CashBattleGratuityRequest) (*CashBattleGratuityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashBattleGratuity not implemented")
}
func (UnimplementedCashBattleServiceServer) PubCashBattleInfo(context.Context, *PubCashBattleInfoRequest) (*PubCashBattleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubCashBattleInfo not implemented")
}
func (UnimplementedCashBattleServiceServer) PubCashBattleVersus(context.Context, *PubCashBattleVersusRequest) (*PubCashBattleVersusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubCashBattleVersus not implemented")
}
func (UnimplementedCashBattleServiceServer) PubCashBattleCoe(context.Context, *PubCashBattleCoeRequest) (*PubCashBattleCoeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubCashBattleCoe not implemented")
}
func (UnimplementedCashBattleServiceServer) GetCashBattleVersusMatch(context.Context, *GetCashBattleVersusMatchRequest) (*GetCashBattleVersusMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashBattleVersusMatch not implemented")
}
func (UnimplementedCashBattleServiceServer) GetCashBattleResult(context.Context, *GetCashBattleResultRequest) (*GetCashBattleResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashBattleResult not implemented")
}
func (UnimplementedCashBattleServiceServer) SettleCashBattleReward(context.Context, *SettleCashBattleRewardRequest) (*SettleCashBattleRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleCashBattleReward not implemented")
}

// UnsafeCashBattleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CashBattleServiceServer will
// result in compilation errors.
type UnsafeCashBattleServiceServer interface {
	mustEmbedUnimplementedCashBattleServiceServer()
}

func RegisterCashBattleServiceServer(s grpc.ServiceRegistrar, srv CashBattleServiceServer) {
	s.RegisterService(&CashBattleService_ServiceDesc, srv)
}

func _CashBattleService_GetCashBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashBattleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).GetCashBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_GetCashBattle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).GetCashBattle(ctx, req.(*GetCashBattleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_GetCashBattleVersus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashBattleVersusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).GetCashBattleVersus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_GetCashBattleVersus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).GetCashBattleVersus(ctx, req.(*GetCashBattleVersusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_GetCashBattleGuess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashBattleGuessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).GetCashBattleGuess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_GetCashBattleGuess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).GetCashBattleGuess(ctx, req.(*GetCashBattleGuessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_JoinCashBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinCashBattleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).JoinCashBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_JoinCashBattle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).JoinCashBattle(ctx, req.(*JoinCashBattleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_ConfirmCashBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCashBattleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).ConfirmCashBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_ConfirmCashBattle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).ConfirmCashBattle(ctx, req.(*ConfirmCashBattleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_StakeCashBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeCashBattleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).StakeCashBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_StakeCashBattle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).StakeCashBattle(ctx, req.(*StakeCashBattleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_IsPlayerJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPlayerJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).IsPlayerJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_IsPlayerJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).IsPlayerJoin(ctx, req.(*IsPlayerJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_IsPlayerBeSelected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPlayerBeSelectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).IsPlayerBeSelected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_IsPlayerBeSelected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).IsPlayerBeSelected(ctx, req.(*IsPlayerBeSelectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_IsPlayerConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPlayerConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).IsPlayerConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_IsPlayerConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).IsPlayerConfirm(ctx, req.(*IsPlayerConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_GetCashBattleCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashBattleConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).GetCashBattleCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_GetCashBattleCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).GetCashBattleCondition(ctx, req.(*GetCashBattleConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_SelectBattleHero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectBattleHeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).SelectBattleHero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_SelectBattleHero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).SelectBattleHero(ctx, req.(*SelectBattleHeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_GetCashBattleStartTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashBattleStartTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).GetCashBattleStartTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_GetCashBattleStartTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).GetCashBattleStartTime(ctx, req.(*GetCashBattleStartTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_WatchCashBattle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchCashBattleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CashBattleServiceServer).WatchCashBattle(m, &cashBattleServiceWatchCashBattleServer{ServerStream: stream})
}

type CashBattleService_WatchCashBattleServer interface {
	Send(*WatchCashBattleResponse) error
	grpc.ServerStream
}

type cashBattleServiceWatchCashBattleServer struct {
	grpc.ServerStream
}

func (x *cashBattleServiceWatchCashBattleServer) Send(m *WatchCashBattleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CashBattleService_BattleResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BattleResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).BattleResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_BattleResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).BattleResult(ctx, req.(*BattleResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_CashBattleGratuity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashBattleGratuityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).CashBattleGratuity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_CashBattleGratuity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).CashBattleGratuity(ctx, req.(*CashBattleGratuityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_PubCashBattleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubCashBattleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).PubCashBattleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_PubCashBattleInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).PubCashBattleInfo(ctx, req.(*PubCashBattleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_PubCashBattleVersus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubCashBattleVersusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).PubCashBattleVersus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_PubCashBattleVersus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).PubCashBattleVersus(ctx, req.(*PubCashBattleVersusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_PubCashBattleCoe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubCashBattleCoeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).PubCashBattleCoe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_PubCashBattleCoe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).PubCashBattleCoe(ctx, req.(*PubCashBattleCoeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_GetCashBattleVersusMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashBattleVersusMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).GetCashBattleVersusMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_GetCashBattleVersusMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).GetCashBattleVersusMatch(ctx, req.(*GetCashBattleVersusMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_GetCashBattleResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashBattleResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).GetCashBattleResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_GetCashBattleResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).GetCashBattleResult(ctx, req.(*GetCashBattleResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CashBattleService_SettleCashBattleReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleCashBattleRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CashBattleServiceServer).SettleCashBattleReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CashBattleService_SettleCashBattleReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CashBattleServiceServer).SettleCashBattleReward(ctx, req.(*SettleCashBattleRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CashBattleService_ServiceDesc is the grpc.ServiceDesc for CashBattleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CashBattleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cashbattle.CashBattleService",
	HandlerType: (*CashBattleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCashBattle",
			Handler:    _CashBattleService_GetCashBattle_Handler,
		},
		{
			MethodName: "GetCashBattleVersus",
			Handler:    _CashBattleService_GetCashBattleVersus_Handler,
		},
		{
			MethodName: "GetCashBattleGuess",
			Handler:    _CashBattleService_GetCashBattleGuess_Handler,
		},
		{
			MethodName: "JoinCashBattle",
			Handler:    _CashBattleService_JoinCashBattle_Handler,
		},
		{
			MethodName: "ConfirmCashBattle",
			Handler:    _CashBattleService_ConfirmCashBattle_Handler,
		},
		{
			MethodName: "StakeCashBattle",
			Handler:    _CashBattleService_StakeCashBattle_Handler,
		},
		{
			MethodName: "IsPlayerJoin",
			Handler:    _CashBattleService_IsPlayerJoin_Handler,
		},
		{
			MethodName: "IsPlayerBeSelected",
			Handler:    _CashBattleService_IsPlayerBeSelected_Handler,
		},
		{
			MethodName: "IsPlayerConfirm",
			Handler:    _CashBattleService_IsPlayerConfirm_Handler,
		},
		{
			MethodName: "GetCashBattleCondition",
			Handler:    _CashBattleService_GetCashBattleCondition_Handler,
		},
		{
			MethodName: "SelectBattleHero",
			Handler:    _CashBattleService_SelectBattleHero_Handler,
		},
		{
			MethodName: "GetCashBattleStartTime",
			Handler:    _CashBattleService_GetCashBattleStartTime_Handler,
		},
		{
			MethodName: "BattleResult",
			Handler:    _CashBattleService_BattleResult_Handler,
		},
		{
			MethodName: "CashBattleGratuity",
			Handler:    _CashBattleService_CashBattleGratuity_Handler,
		},
		{
			MethodName: "PubCashBattleInfo",
			Handler:    _CashBattleService_PubCashBattleInfo_Handler,
		},
		{
			MethodName: "PubCashBattleVersus",
			Handler:    _CashBattleService_PubCashBattleVersus_Handler,
		},
		{
			MethodName: "PubCashBattleCoe",
			Handler:    _CashBattleService_PubCashBattleCoe_Handler,
		},
		{
			MethodName: "GetCashBattleVersusMatch",
			Handler:    _CashBattleService_GetCashBattleVersusMatch_Handler,
		},
		{
			MethodName: "GetCashBattleResult",
			Handler:    _CashBattleService_GetCashBattleResult_Handler,
		},
		{
			MethodName: "SettleCashBattleReward",
			Handler:    _CashBattleService_SettleCashBattleReward_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchCashBattle",
			Handler:       _CashBattleService_WatchCashBattle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cashbattle/cashbattle.proto",
}
