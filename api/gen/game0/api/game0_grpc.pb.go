// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: game0/game0.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Game0Service_Hi_FullMethodName    = "/game0.pb.Game0Service/Hi"
	Game0Service_Watch_FullMethodName = "/game0.pb.Game0Service/Watch"
)

// Game0ServiceClient is the client API for Game0Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Game0ServiceClient interface {
	// Say hi to topic
	Hi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiResponse, error)
	// Watch topic message
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchResponse], error)
}

type game0ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGame0ServiceClient(cc grpc.ClientConnInterface) Game0ServiceClient {
	return &game0ServiceClient{cc}
}

func (c *game0ServiceClient) Hi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HiResponse)
	err := c.cc.Invoke(ctx, Game0Service_Hi_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *game0ServiceClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Game0Service_ServiceDesc.Streams[0], Game0Service_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchRequest, WatchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Game0Service_WatchClient = grpc.ServerStreamingClient[WatchResponse]

// Game0ServiceServer is the server API for Game0Service service.
// All implementations should embed UnimplementedGame0ServiceServer
// for forward compatibility.
type Game0ServiceServer interface {
	// Say hi to topic
	Hi(context.Context, *HiRequest) (*HiResponse, error)
	// Watch topic message
	Watch(*WatchRequest, grpc.ServerStreamingServer[WatchResponse]) error
}

// UnimplementedGame0ServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGame0ServiceServer struct{}

func (UnimplementedGame0ServiceServer) Hi(context.Context, *HiRequest) (*HiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hi not implemented")
}
func (UnimplementedGame0ServiceServer) Watch(*WatchRequest, grpc.ServerStreamingServer[WatchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedGame0ServiceServer) testEmbeddedByValue() {}

// UnsafeGame0ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Game0ServiceServer will
// result in compilation errors.
type UnsafeGame0ServiceServer interface {
	mustEmbedUnimplementedGame0ServiceServer()
}

func RegisterGame0ServiceServer(s grpc.ServiceRegistrar, srv Game0ServiceServer) {
	// If the following call pancis, it indicates UnimplementedGame0ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Game0Service_ServiceDesc, srv)
}

func _Game0Service_Hi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Game0ServiceServer).Hi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Game0Service_Hi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Game0ServiceServer).Hi(ctx, req.(*HiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game0Service_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Game0ServiceServer).Watch(m, &grpc.GenericServerStream[WatchRequest, WatchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Game0Service_WatchServer = grpc.ServerStreamingServer[WatchResponse]

// Game0Service_ServiceDesc is the grpc.ServiceDesc for Game0Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game0Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game0.pb.Game0Service",
	HandlerType: (*Game0ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hi",
			Handler:    _Game0Service_Hi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Game0Service_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "game0/game0.proto",
}
