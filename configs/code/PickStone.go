//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type PickStone struct {
	ID              int32
	ResID           int32
	SingleConsume   int32
	TenTimesConsume int32
	DropID          int32
	TenTimesDropID  int32
}

const TypeId_PickStone = 556111012

func (*PickStone) GetTypeId() int32 {
	return 556111012
}

func (_v *PickStone) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ResID"].(float64); !_ok_ {
			err = errors.New("ResID error")
			return
		}
		_v.ResID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SingleConsume"].(float64); !_ok_ {
			err = errors.New("SingleConsume error")
			return
		}
		_v.SingleConsume = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["TenTimesConsume"].(float64); !_ok_ {
			err = errors.New("TenTimesConsume error")
			return
		}
		_v.TenTimesConsume = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["DropID"].(float64); !_ok_ {
			err = errors.New("DropID error")
			return
		}
		_v.DropID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["TenTimesDropID"].(float64); !_ok_ {
			err = errors.New("TenTimesDropID error")
			return
		}
		_v.TenTimesDropID = int32(_tempNum_)
	}
	return
}

func DeserializePickStone(_buf map[string]interface{}) (*PickStone, error) {
	v := &PickStone{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
