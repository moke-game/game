//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type Character struct {
	ID            int32
	Desc          string
	Name          string
	Desp          string
	Career        int32
	Planet        int32
	Res           string
	Skin          []int32
	Radius        int32
	CommonSkill   []int32
	SpecialSkill  int32
	SpecialSkill2 int32
	SuspendSkill  int32
	MoveSkill     int32
	CatchSkill    int32
	VictorySkill  int32
	FailSkill     int32
	CupLvUp       []int32
}

const TypeId_Character = -726803703

func (*Character) GetTypeId() int32 {
	return -726803703
}

func (_v *Character) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Desc, _ok_ = _buf["Desc"].(string); !_ok_ {
			err = errors.New("Desc error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Desp, _ok_ = _buf["Desp"].(string); !_ok_ {
			err = errors.New("Desp error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Career"].(float64); !_ok_ {
			err = errors.New("Career error")
			return
		}
		_v.Career = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Planet"].(float64); !_ok_ {
			err = errors.New("Planet error")
			return
		}
		_v.Planet = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Res, _ok_ = _buf["Res"].(string); !_ok_ {
			err = errors.New("Res error")
			return
		}
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Skin"].([]interface{}); !_ok_ {
			err = errors.New("Skin error")
			return
		}

		_v.Skin = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.Skin = append(_v.Skin, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Radius"].(float64); !_ok_ {
			err = errors.New("Radius error")
			return
		}
		_v.Radius = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["CommonSkill"].([]interface{}); !_ok_ {
			err = errors.New("CommonSkill error")
			return
		}

		_v.CommonSkill = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.CommonSkill = append(_v.CommonSkill, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SpecialSkill"].(float64); !_ok_ {
			err = errors.New("SpecialSkill error")
			return
		}
		_v.SpecialSkill = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SpecialSkill2"].(float64); !_ok_ {
			err = errors.New("SpecialSkill2 error")
			return
		}
		_v.SpecialSkill2 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SuspendSkill"].(float64); !_ok_ {
			err = errors.New("SuspendSkill error")
			return
		}
		_v.SuspendSkill = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MoveSkill"].(float64); !_ok_ {
			err = errors.New("MoveSkill error")
			return
		}
		_v.MoveSkill = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["CatchSkill"].(float64); !_ok_ {
			err = errors.New("CatchSkill error")
			return
		}
		_v.CatchSkill = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["VictorySkill"].(float64); !_ok_ {
			err = errors.New("VictorySkill error")
			return
		}
		_v.VictorySkill = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["FailSkill"].(float64); !_ok_ {
			err = errors.New("FailSkill error")
			return
		}
		_v.FailSkill = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["CupLvUp"].([]interface{}); !_ok_ {
			err = errors.New("CupLvUp error")
			return
		}

		_v.CupLvUp = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.CupLvUp = append(_v.CupLvUp, _list_v_)
		}
	}

	return
}

func DeserializeCharacter(_buf map[string]interface{}) (*Character, error) {
	v := &Character{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
