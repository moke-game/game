//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type SkillBuff struct {
	ID             int32
	Describe       string
	Duration       int32
	DelayEffective int32
	EffectInterval int32
	IsDeadRemove   int32
	AttrTemp       []*ItemReward
	Attr           []*ItemReward
	HpEffect       []int32
	HpHeal         []int32
	Attributes     []*AttrAddition
	State          int32
	BuffCreate     []*BuffbuffCreate
	SkillCD        []*BuffskillCD
	Group          int32
	PreExclude     []int32
	Merge          int32
	MaxOverlay     int32
	AfterExclude   []int32
	Repel          []int32
	Act            string
	EffBondPos     []int32
	EffRes         []string
	EffKeepMode    []int32
	IsListDisplay  int32
	ICON           string
	TriggerAction  []*SkillsTriggerAction
	InformClient   int32
}

const TypeId_SkillBuff = -300343772

func (*SkillBuff) GetTypeId() int32 {
	return -300343772
}

func (_v *SkillBuff) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Describe, _ok_ = _buf["Describe"].(string); !_ok_ {
			err = errors.New("Describe error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Duration"].(float64); !_ok_ {
			err = errors.New("Duration error")
			return
		}
		_v.Duration = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Delay_Effective"].(float64); !_ok_ {
			err = errors.New("Delay_Effective error")
			return
		}
		_v.DelayEffective = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["EffectInterval"].(float64); !_ok_ {
			err = errors.New("EffectInterval error")
			return
		}
		_v.EffectInterval = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["isDeadRemove"].(float64); !_ok_ {
			err = errors.New("isDeadRemove error")
			return
		}
		_v.IsDeadRemove = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["AttrTemp"].([]interface{}); !_ok_ {
			err = errors.New("AttrTemp error")
			return
		}

		_v.AttrTemp = make([]*ItemReward, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemReward
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemReward(_x_); err != nil {
					return
				}
			}
			_v.AttrTemp = append(_v.AttrTemp, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Attr"].([]interface{}); !_ok_ {
			err = errors.New("Attr error")
			return
		}

		_v.Attr = make([]*ItemReward, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemReward
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemReward(_x_); err != nil {
					return
				}
			}
			_v.Attr = append(_v.Attr, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["HpEffect"].([]interface{}); !_ok_ {
			err = errors.New("HpEffect error")
			return
		}

		_v.HpEffect = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.HpEffect = append(_v.HpEffect, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["HpHeal"].([]interface{}); !_ok_ {
			err = errors.New("HpHeal error")
			return
		}

		_v.HpHeal = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.HpHeal = append(_v.HpHeal, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Attributes"].([]interface{}); !_ok_ {
			err = errors.New("Attributes error")
			return
		}

		_v.Attributes = make([]*AttrAddition, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *AttrAddition
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeAttrAddition(_x_); err != nil {
					return
				}
			}
			_v.Attributes = append(_v.Attributes, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["State"].(float64); !_ok_ {
			err = errors.New("State error")
			return
		}
		_v.State = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BuffCreate"].([]interface{}); !_ok_ {
			err = errors.New("BuffCreate error")
			return
		}

		_v.BuffCreate = make([]*BuffbuffCreate, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *BuffbuffCreate
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeBuffbuffCreate(_x_); err != nil {
					return
				}
			}
			_v.BuffCreate = append(_v.BuffCreate, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["SkillCD"].([]interface{}); !_ok_ {
			err = errors.New("SkillCD error")
			return
		}

		_v.SkillCD = make([]*BuffskillCD, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *BuffskillCD
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeBuffskillCD(_x_); err != nil {
					return
				}
			}
			_v.SkillCD = append(_v.SkillCD, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Group"].(float64); !_ok_ {
			err = errors.New("Group error")
			return
		}
		_v.Group = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["PreExclude"].([]interface{}); !_ok_ {
			err = errors.New("PreExclude error")
			return
		}

		_v.PreExclude = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.PreExclude = append(_v.PreExclude, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Merge"].(float64); !_ok_ {
			err = errors.New("Merge error")
			return
		}
		_v.Merge = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MaxOverlay"].(float64); !_ok_ {
			err = errors.New("MaxOverlay error")
			return
		}
		_v.MaxOverlay = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["AfterExclude"].([]interface{}); !_ok_ {
			err = errors.New("AfterExclude error")
			return
		}

		_v.AfterExclude = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.AfterExclude = append(_v.AfterExclude, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Repel"].([]interface{}); !_ok_ {
			err = errors.New("Repel error")
			return
		}

		_v.Repel = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.Repel = append(_v.Repel, _list_v_)
		}
	}

	{
		var _ok_ bool
		if _v.Act, _ok_ = _buf["Act"].(string); !_ok_ {
			err = errors.New("Act error")
			return
		}
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["EffBondPos"].([]interface{}); !_ok_ {
			err = errors.New("EffBondPos error")
			return
		}

		_v.EffBondPos = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.EffBondPos = append(_v.EffBondPos, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["EffRes"].([]interface{}); !_ok_ {
			err = errors.New("EffRes error")
			return
		}

		_v.EffRes = make([]string, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ string
			{
				if _list_v_, _ok_ = _e_.(string); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
			}
			_v.EffRes = append(_v.EffRes, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["EffKeepMode"].([]interface{}); !_ok_ {
			err = errors.New("EffKeepMode error")
			return
		}

		_v.EffKeepMode = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.EffKeepMode = append(_v.EffKeepMode, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["IsListDisplay"].(float64); !_ok_ {
			err = errors.New("IsListDisplay error")
			return
		}
		_v.IsListDisplay = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.ICON, _ok_ = _buf["ICON"].(string); !_ok_ {
			err = errors.New("ICON error")
			return
		}
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["TriggerAction"].([]interface{}); !_ok_ {
			err = errors.New("TriggerAction error")
			return
		}

		_v.TriggerAction = make([]*SkillsTriggerAction, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *SkillsTriggerAction
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeSkillsTriggerAction(_x_); err != nil {
					return
				}
			}
			_v.TriggerAction = append(_v.TriggerAction, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["InformClient"].(float64); !_ok_ {
			err = errors.New("InformClient error")
			return
		}
		_v.InformClient = int32(_tempNum_)
	}
	return
}

func DeserializeSkillBuff(_buf map[string]interface{}) (*SkillBuff, error) {
	v := &SkillBuff{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
