//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type Stuff struct {
	ID           int32
	Name         string
	Des          string
	Res          string
	Type         int32
	AutoPick     int32
	Collect      int32
	Radius       int32
	HoldMode     int32
	Delay        int32
	CD           int32
	EffectID     []int32
	BuffID       []int32
	AISearchType int32
	CarryOn      int32
	Point        int32
}

const TypeId_Stuff = 80223700

func (*Stuff) GetTypeId() int32 {
	return 80223700
}

func (_v *Stuff) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Des, _ok_ = _buf["Des"].(string); !_ok_ {
			err = errors.New("Des error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Res, _ok_ = _buf["Res"].(string); !_ok_ {
			err = errors.New("Res error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Type"].(float64); !_ok_ {
			err = errors.New("Type error")
			return
		}
		_v.Type = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["AutoPick"].(float64); !_ok_ {
			err = errors.New("AutoPick error")
			return
		}
		_v.AutoPick = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Collect"].(float64); !_ok_ {
			err = errors.New("Collect error")
			return
		}
		_v.Collect = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Radius"].(float64); !_ok_ {
			err = errors.New("Radius error")
			return
		}
		_v.Radius = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["HoldMode"].(float64); !_ok_ {
			err = errors.New("HoldMode error")
			return
		}
		_v.HoldMode = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Delay"].(float64); !_ok_ {
			err = errors.New("Delay error")
			return
		}
		_v.Delay = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["CD"].(float64); !_ok_ {
			err = errors.New("CD error")
			return
		}
		_v.CD = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["EffectID"].([]interface{}); !_ok_ {
			err = errors.New("EffectID error")
			return
		}

		_v.EffectID = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.EffectID = append(_v.EffectID, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BuffID"].([]interface{}); !_ok_ {
			err = errors.New("BuffID error")
			return
		}

		_v.BuffID = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.BuffID = append(_v.BuffID, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["AISearchType"].(float64); !_ok_ {
			err = errors.New("AISearchType error")
			return
		}
		_v.AISearchType = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["CarryOn"].(float64); !_ok_ {
			err = errors.New("CarryOn error")
			return
		}
		_v.CarryOn = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Point"].(float64); !_ok_ {
			err = errors.New("Point error")
			return
		}
		_v.Point = int32(_tempNum_)
	}
	return
}

func DeserializeStuff(_buf map[string]interface{}) (*Stuff, error) {
	v := &Stuff{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
