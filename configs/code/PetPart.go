//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type PetPart struct {
	ID          int32
	Name        string
	Desp        string
	Icon        string
	Res         string
	Region      int32
	Quality     int32
	PartLottery []*PetPartLottery
	AttNumMain  int32
	AttMain     []*PetAttribute
	AttNumMinor int32
	AttMinor    []*PetAttribute
	Decompose   []*ItemReward
}

const TypeId_PetPart = 987003282

func (*PetPart) GetTypeId() int32 {
	return 987003282
}

func (_v *PetPart) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Desp, _ok_ = _buf["Desp"].(string); !_ok_ {
			err = errors.New("Desp error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Icon, _ok_ = _buf["Icon"].(string); !_ok_ {
			err = errors.New("Icon error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Res, _ok_ = _buf["Res"].(string); !_ok_ {
			err = errors.New("Res error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Region"].(float64); !_ok_ {
			err = errors.New("Region error")
			return
		}
		_v.Region = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Quality"].(float64); !_ok_ {
			err = errors.New("Quality error")
			return
		}
		_v.Quality = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["PartLottery"].([]interface{}); !_ok_ {
			err = errors.New("PartLottery error")
			return
		}

		_v.PartLottery = make([]*PetPartLottery, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *PetPartLottery
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializePetPartLottery(_x_); err != nil {
					return
				}
			}
			_v.PartLottery = append(_v.PartLottery, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["AttNumMain"].(float64); !_ok_ {
			err = errors.New("AttNumMain error")
			return
		}
		_v.AttNumMain = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["AttMain"].([]interface{}); !_ok_ {
			err = errors.New("AttMain error")
			return
		}

		_v.AttMain = make([]*PetAttribute, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *PetAttribute
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializePetAttribute(_x_); err != nil {
					return
				}
			}
			_v.AttMain = append(_v.AttMain, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["AttNumMinor"].(float64); !_ok_ {
			err = errors.New("AttNumMinor error")
			return
		}
		_v.AttNumMinor = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["AttMinor"].([]interface{}); !_ok_ {
			err = errors.New("AttMinor error")
			return
		}

		_v.AttMinor = make([]*PetAttribute, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *PetAttribute
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializePetAttribute(_x_); err != nil {
					return
				}
			}
			_v.AttMinor = append(_v.AttMinor, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Decompose"].([]interface{}); !_ok_ {
			err = errors.New("Decompose error")
			return
		}

		_v.Decompose = make([]*ItemReward, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemReward
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemReward(_x_); err != nil {
					return
				}
			}
			_v.Decompose = append(_v.Decompose, _list_v_)
		}
	}

	return
}

func DeserializePetPart(_buf map[string]interface{}) (*PetPart, error) {
	v := &PetPart{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
