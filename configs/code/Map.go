//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type Map struct {
	ID             int32
	Name           string
	MapType        int32
	Desp           string
	CommonLoader   int32
	BirthRandom    int32
	SettlePosition []int32
	CenterPosition []int32
	BirthPoints    []*PointRanPoint
	Icon           string
	Res            string
	MapPlay        string
	CrateRes       int32
	CrateCD        int32
	BuffRandom     []int32
	BuffWeight     []int32
	BuffCD         []int32
	BossID         int32
	BossCD         int32
	BossDrop       []int32
	BossDropWeight []int32
	Bgm            string
	ItemID         []int32
	ItemWeight     []int32
	ItemPath       []int32
	ItemCD         []int32
	PlayerMax      int32
}

const TypeId_Map = 77116

func (*Map) GetTypeId() int32 {
	return 77116
}

func (_v *Map) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MapType"].(float64); !_ok_ {
			err = errors.New("MapType error")
			return
		}
		_v.MapType = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Desp, _ok_ = _buf["Desp"].(string); !_ok_ {
			err = errors.New("Desp error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["CommonLoader"].(float64); !_ok_ {
			err = errors.New("CommonLoader error")
			return
		}
		_v.CommonLoader = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["BirthRandom"].(float64); !_ok_ {
			err = errors.New("BirthRandom error")
			return
		}
		_v.BirthRandom = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["SettlePosition"].([]interface{}); !_ok_ {
			err = errors.New("SettlePosition error")
			return
		}

		_v.SettlePosition = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.SettlePosition = append(_v.SettlePosition, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["CenterPosition"].([]interface{}); !_ok_ {
			err = errors.New("CenterPosition error")
			return
		}

		_v.CenterPosition = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.CenterPosition = append(_v.CenterPosition, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BirthPoints"].([]interface{}); !_ok_ {
			err = errors.New("BirthPoints error")
			return
		}

		_v.BirthPoints = make([]*PointRanPoint, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *PointRanPoint
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializePointRanPoint(_x_); err != nil {
					return
				}
			}
			_v.BirthPoints = append(_v.BirthPoints, _list_v_)
		}
	}

	{
		var _ok_ bool
		if _v.Icon, _ok_ = _buf["Icon"].(string); !_ok_ {
			err = errors.New("Icon error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Res, _ok_ = _buf["Res"].(string); !_ok_ {
			err = errors.New("Res error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.MapPlay, _ok_ = _buf["MapPlay"].(string); !_ok_ {
			err = errors.New("MapPlay error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["CrateRes"].(float64); !_ok_ {
			err = errors.New("CrateRes error")
			return
		}
		_v.CrateRes = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["CrateCD"].(float64); !_ok_ {
			err = errors.New("CrateCD error")
			return
		}
		_v.CrateCD = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BuffRandom"].([]interface{}); !_ok_ {
			err = errors.New("BuffRandom error")
			return
		}

		_v.BuffRandom = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.BuffRandom = append(_v.BuffRandom, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BuffWeight"].([]interface{}); !_ok_ {
			err = errors.New("BuffWeight error")
			return
		}

		_v.BuffWeight = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.BuffWeight = append(_v.BuffWeight, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BuffCD"].([]interface{}); !_ok_ {
			err = errors.New("BuffCD error")
			return
		}

		_v.BuffCD = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.BuffCD = append(_v.BuffCD, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["BossID"].(float64); !_ok_ {
			err = errors.New("BossID error")
			return
		}
		_v.BossID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["BossCD"].(float64); !_ok_ {
			err = errors.New("BossCD error")
			return
		}
		_v.BossCD = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BossDrop"].([]interface{}); !_ok_ {
			err = errors.New("BossDrop error")
			return
		}

		_v.BossDrop = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.BossDrop = append(_v.BossDrop, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BossDropWeight"].([]interface{}); !_ok_ {
			err = errors.New("BossDropWeight error")
			return
		}

		_v.BossDropWeight = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.BossDropWeight = append(_v.BossDropWeight, _list_v_)
		}
	}

	{
		var _ok_ bool
		if _v.Bgm, _ok_ = _buf["Bgm"].(string); !_ok_ {
			err = errors.New("Bgm error")
			return
		}
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["ItemID"].([]interface{}); !_ok_ {
			err = errors.New("ItemID error")
			return
		}

		_v.ItemID = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.ItemID = append(_v.ItemID, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["ItemWeight"].([]interface{}); !_ok_ {
			err = errors.New("ItemWeight error")
			return
		}

		_v.ItemWeight = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.ItemWeight = append(_v.ItemWeight, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["ItemPath"].([]interface{}); !_ok_ {
			err = errors.New("ItemPath error")
			return
		}

		_v.ItemPath = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.ItemPath = append(_v.ItemPath, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["ItemCD"].([]interface{}); !_ok_ {
			err = errors.New("ItemCD error")
			return
		}

		_v.ItemCD = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.ItemCD = append(_v.ItemCD, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerMax"].(float64); !_ok_ {
			err = errors.New("PlayerMax error")
			return
		}
		_v.PlayerMax = int32(_tempNum_)
	}
	return
}

func DeserializeMap(_buf map[string]interface{}) (*Map, error) {
	v := &Map{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
