//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type PetEgg struct {
	ID              int32
	Name            string
	Res             string
	IncubateTime    int32
	AvatarLimit     []int32
	IncubateAvatar1 []*PetIncubateAvatar
	IncubateAvatar2 []*PetIncubateAvatar
	IncubateAvatar3 []*PetIncubateAvatar
	IncubateAvatar4 []*PetIncubateAvatar
	FeedValue       []*PetFeedValue
	CountDown       int32
}

const TypeId_PetEgg = -1907834234

func (*PetEgg) GetTypeId() int32 {
	return -1907834234
}

func (_v *PetEgg) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Res, _ok_ = _buf["Res"].(string); !_ok_ {
			err = errors.New("Res error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["IncubateTime"].(float64); !_ok_ {
			err = errors.New("IncubateTime error")
			return
		}
		_v.IncubateTime = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["AvatarLimit"].([]interface{}); !_ok_ {
			err = errors.New("AvatarLimit error")
			return
		}

		_v.AvatarLimit = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.AvatarLimit = append(_v.AvatarLimit, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["IncubateAvatar1"].([]interface{}); !_ok_ {
			err = errors.New("IncubateAvatar1 error")
			return
		}

		_v.IncubateAvatar1 = make([]*PetIncubateAvatar, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *PetIncubateAvatar
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializePetIncubateAvatar(_x_); err != nil {
					return
				}
			}
			_v.IncubateAvatar1 = append(_v.IncubateAvatar1, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["IncubateAvatar2"].([]interface{}); !_ok_ {
			err = errors.New("IncubateAvatar2 error")
			return
		}

		_v.IncubateAvatar2 = make([]*PetIncubateAvatar, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *PetIncubateAvatar
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializePetIncubateAvatar(_x_); err != nil {
					return
				}
			}
			_v.IncubateAvatar2 = append(_v.IncubateAvatar2, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["IncubateAvatar3"].([]interface{}); !_ok_ {
			err = errors.New("IncubateAvatar3 error")
			return
		}

		_v.IncubateAvatar3 = make([]*PetIncubateAvatar, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *PetIncubateAvatar
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializePetIncubateAvatar(_x_); err != nil {
					return
				}
			}
			_v.IncubateAvatar3 = append(_v.IncubateAvatar3, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["IncubateAvatar4"].([]interface{}); !_ok_ {
			err = errors.New("IncubateAvatar4 error")
			return
		}

		_v.IncubateAvatar4 = make([]*PetIncubateAvatar, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *PetIncubateAvatar
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializePetIncubateAvatar(_x_); err != nil {
					return
				}
			}
			_v.IncubateAvatar4 = append(_v.IncubateAvatar4, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["FeedValue"].([]interface{}); !_ok_ {
			err = errors.New("FeedValue error")
			return
		}

		_v.FeedValue = make([]*PetFeedValue, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *PetFeedValue
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializePetFeedValue(_x_); err != nil {
					return
				}
			}
			_v.FeedValue = append(_v.FeedValue, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["CountDown"].(float64); !_ok_ {
			err = errors.New("CountDown error")
			return
		}
		_v.CountDown = int32(_tempNum_)
	}
	return
}

func DeserializePetEgg(_buf map[string]interface{}) (*PetEgg, error) {
	v := &PetEgg{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
