//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type BattleRule2 struct {
	ID               int32
	Mode             int32
	PlayerExp1       int32
	PlayerExp2       int32
	PlayerExp3       int32
	PlayerExp4       int32
	PlayerExp5       int32
	PlayerExp6       int32
	PlayerExp7       int32
	PlayerExp8       int32
	PlayerExp9       int32
	SkillExp1        int32
	SkillExp2        int32
	SkillExp3        int32
	SkillExp4        int32
	SkillExp5        int32
	SkillExp6        int32
	SkillExp7        int32
	SkillExp8        int32
	SkillExp9        int32
	Gold1            int32
	Gold2            int32
	Gold3            int32
	Gold4            int32
	Gold5            int32
	Gold6            int32
	Gold7            int32
	Gold8            int32
	Gold9            int32
	GoldContinue     int32
	GoldMvp          int32
	Time             int32
	ReviveTimes      int32
	ReviveWait       int32
	Tips1            string
	Tips2            string
	Tips3            string
	Tips4            string
	FirstAwardLowest int32
}

const TypeId_BattleRule2 = 906584766

func (*BattleRule2) GetTypeId() int32 {
	return 906584766
}

func (_v *BattleRule2) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Mode"].(float64); !_ok_ {
			err = errors.New("Mode error")
			return
		}
		_v.Mode = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp1"].(float64); !_ok_ {
			err = errors.New("PlayerExp1 error")
			return
		}
		_v.PlayerExp1 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp2"].(float64); !_ok_ {
			err = errors.New("PlayerExp2 error")
			return
		}
		_v.PlayerExp2 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp3"].(float64); !_ok_ {
			err = errors.New("PlayerExp3 error")
			return
		}
		_v.PlayerExp3 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp4"].(float64); !_ok_ {
			err = errors.New("PlayerExp4 error")
			return
		}
		_v.PlayerExp4 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp5"].(float64); !_ok_ {
			err = errors.New("PlayerExp5 error")
			return
		}
		_v.PlayerExp5 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp6"].(float64); !_ok_ {
			err = errors.New("PlayerExp6 error")
			return
		}
		_v.PlayerExp6 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp7"].(float64); !_ok_ {
			err = errors.New("PlayerExp7 error")
			return
		}
		_v.PlayerExp7 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp8"].(float64); !_ok_ {
			err = errors.New("PlayerExp8 error")
			return
		}
		_v.PlayerExp8 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp9"].(float64); !_ok_ {
			err = errors.New("PlayerExp9 error")
			return
		}
		_v.PlayerExp9 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp1"].(float64); !_ok_ {
			err = errors.New("SkillExp1 error")
			return
		}
		_v.SkillExp1 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp2"].(float64); !_ok_ {
			err = errors.New("SkillExp2 error")
			return
		}
		_v.SkillExp2 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp3"].(float64); !_ok_ {
			err = errors.New("SkillExp3 error")
			return
		}
		_v.SkillExp3 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp4"].(float64); !_ok_ {
			err = errors.New("SkillExp4 error")
			return
		}
		_v.SkillExp4 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp5"].(float64); !_ok_ {
			err = errors.New("SkillExp5 error")
			return
		}
		_v.SkillExp5 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp6"].(float64); !_ok_ {
			err = errors.New("SkillExp6 error")
			return
		}
		_v.SkillExp6 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp7"].(float64); !_ok_ {
			err = errors.New("SkillExp7 error")
			return
		}
		_v.SkillExp7 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp8"].(float64); !_ok_ {
			err = errors.New("SkillExp8 error")
			return
		}
		_v.SkillExp8 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp9"].(float64); !_ok_ {
			err = errors.New("SkillExp9 error")
			return
		}
		_v.SkillExp9 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold1"].(float64); !_ok_ {
			err = errors.New("Gold1 error")
			return
		}
		_v.Gold1 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold2"].(float64); !_ok_ {
			err = errors.New("Gold2 error")
			return
		}
		_v.Gold2 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold3"].(float64); !_ok_ {
			err = errors.New("Gold3 error")
			return
		}
		_v.Gold3 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold4"].(float64); !_ok_ {
			err = errors.New("Gold4 error")
			return
		}
		_v.Gold4 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold5"].(float64); !_ok_ {
			err = errors.New("Gold5 error")
			return
		}
		_v.Gold5 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold6"].(float64); !_ok_ {
			err = errors.New("Gold6 error")
			return
		}
		_v.Gold6 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold7"].(float64); !_ok_ {
			err = errors.New("Gold7 error")
			return
		}
		_v.Gold7 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold8"].(float64); !_ok_ {
			err = errors.New("Gold8 error")
			return
		}
		_v.Gold8 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold9"].(float64); !_ok_ {
			err = errors.New("Gold9 error")
			return
		}
		_v.Gold9 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["GoldContinue"].(float64); !_ok_ {
			err = errors.New("GoldContinue error")
			return
		}
		_v.GoldContinue = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["GoldMvp"].(float64); !_ok_ {
			err = errors.New("GoldMvp error")
			return
		}
		_v.GoldMvp = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Time"].(float64); !_ok_ {
			err = errors.New("Time error")
			return
		}
		_v.Time = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ReviveTimes"].(float64); !_ok_ {
			err = errors.New("ReviveTimes error")
			return
		}
		_v.ReviveTimes = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ReviveWait"].(float64); !_ok_ {
			err = errors.New("ReviveWait error")
			return
		}
		_v.ReviveWait = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Tips1, _ok_ = _buf["Tips1"].(string); !_ok_ {
			err = errors.New("Tips1 error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Tips2, _ok_ = _buf["Tips2"].(string); !_ok_ {
			err = errors.New("Tips2 error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Tips3, _ok_ = _buf["Tips3"].(string); !_ok_ {
			err = errors.New("Tips3 error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Tips4, _ok_ = _buf["Tips4"].(string); !_ok_ {
			err = errors.New("Tips4 error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["FirstAwardLowest"].(float64); !_ok_ {
			err = errors.New("FirstAwardLowest error")
			return
		}
		_v.FirstAwardLowest = int32(_tempNum_)
	}
	return
}

func DeserializeBattleRule2(_buf map[string]interface{}) (*BattleRule2, error) {
	v := &BattleRule2{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
