//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type TaskMain struct {
	ID               int32
	Name             string
	Desp             string
	PreID            int32
	MissionCategory  int32
	MissionCondition int32
	MissionType      int32
	MissionNum       []int32
	TaskGroup        int32
	MissionAdd       []int32
	Reward           []*ItemReward
	UnlockCup        int32
	OpenFunID        int32
	Goto             int32
	GotoPara         []string
	Auto             int32
	FirstMission     int32
}

const TypeId_TaskMain = -345716482

func (*TaskMain) GetTypeId() int32 {
	return -345716482
}

func (_v *TaskMain) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Desp, _ok_ = _buf["Desp"].(string); !_ok_ {
			err = errors.New("Desp error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PreID"].(float64); !_ok_ {
			err = errors.New("PreID error")
			return
		}
		_v.PreID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MissionCategory"].(float64); !_ok_ {
			err = errors.New("MissionCategory error")
			return
		}
		_v.MissionCategory = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MissionCondition"].(float64); !_ok_ {
			err = errors.New("MissionCondition error")
			return
		}
		_v.MissionCondition = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MissionType"].(float64); !_ok_ {
			err = errors.New("MissionType error")
			return
		}
		_v.MissionType = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["MissionNum"].([]interface{}); !_ok_ {
			err = errors.New("MissionNum error")
			return
		}

		_v.MissionNum = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.MissionNum = append(_v.MissionNum, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["TaskGroup"].(float64); !_ok_ {
			err = errors.New("TaskGroup error")
			return
		}
		_v.TaskGroup = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["MissionAdd"].([]interface{}); !_ok_ {
			err = errors.New("MissionAdd error")
			return
		}

		_v.MissionAdd = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.MissionAdd = append(_v.MissionAdd, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Reward"].([]interface{}); !_ok_ {
			err = errors.New("Reward error")
			return
		}

		_v.Reward = make([]*ItemReward, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemReward
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemReward(_x_); err != nil {
					return
				}
			}
			_v.Reward = append(_v.Reward, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["UnlockCup"].(float64); !_ok_ {
			err = errors.New("UnlockCup error")
			return
		}
		_v.UnlockCup = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["OpenFunID"].(float64); !_ok_ {
			err = errors.New("OpenFunID error")
			return
		}
		_v.OpenFunID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Goto"].(float64); !_ok_ {
			err = errors.New("Goto error")
			return
		}
		_v.Goto = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["GotoPara"].([]interface{}); !_ok_ {
			err = errors.New("GotoPara error")
			return
		}

		_v.GotoPara = make([]string, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ string
			{
				if _list_v_, _ok_ = _e_.(string); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
			}
			_v.GotoPara = append(_v.GotoPara, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Auto"].(float64); !_ok_ {
			err = errors.New("Auto error")
			return
		}
		_v.Auto = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["FirstMission"].(float64); !_ok_ {
			err = errors.New("FirstMission error")
			return
		}
		_v.FirstMission = int32(_tempNum_)
	}
	return
}

func DeserializeTaskMain(_buf map[string]interface{}) (*TaskMain, error) {
	v := &TaskMain{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
