//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type Monster struct {
	ID               int32
	Name             string
	Des              string
	Res              string
	Icon             string
	Type             int32
	HitBox           []int32
	HitEffectRadius  int32
	DisappearDelay   int32
	FixedDamageTaken int32
	HP               int32
	Atk              int32
	Def              int32
	Spd              int32
	HpBarNum         int32
	Skill1           []int32
	Skill2           []int32
	SkillDisplay     []int32
	Skill3           []int32
	Skill4           []int32
	DropList         []*ItemDropItemPool
	DeathSkill       []int32
}

const TypeId_Monster = -1393696838

func (*Monster) GetTypeId() int32 {
	return -1393696838
}

func (_v *Monster) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Des, _ok_ = _buf["Des"].(string); !_ok_ {
			err = errors.New("Des error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Res, _ok_ = _buf["Res"].(string); !_ok_ {
			err = errors.New("Res error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Icon, _ok_ = _buf["Icon"].(string); !_ok_ {
			err = errors.New("Icon error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Type"].(float64); !_ok_ {
			err = errors.New("Type error")
			return
		}
		_v.Type = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["HitBox"].([]interface{}); !_ok_ {
			err = errors.New("HitBox error")
			return
		}

		_v.HitBox = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.HitBox = append(_v.HitBox, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["HitEffectRadius"].(float64); !_ok_ {
			err = errors.New("HitEffectRadius error")
			return
		}
		_v.HitEffectRadius = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["DisappearDelay"].(float64); !_ok_ {
			err = errors.New("DisappearDelay error")
			return
		}
		_v.DisappearDelay = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["FixedDamageTaken"].(float64); !_ok_ {
			err = errors.New("FixedDamageTaken error")
			return
		}
		_v.FixedDamageTaken = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["HP"].(float64); !_ok_ {
			err = errors.New("HP error")
			return
		}
		_v.HP = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Atk"].(float64); !_ok_ {
			err = errors.New("Atk error")
			return
		}
		_v.Atk = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Def"].(float64); !_ok_ {
			err = errors.New("Def error")
			return
		}
		_v.Def = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Spd"].(float64); !_ok_ {
			err = errors.New("Spd error")
			return
		}
		_v.Spd = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["HpBarNum"].(float64); !_ok_ {
			err = errors.New("HpBarNum error")
			return
		}
		_v.HpBarNum = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Skill1"].([]interface{}); !_ok_ {
			err = errors.New("Skill1 error")
			return
		}

		_v.Skill1 = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.Skill1 = append(_v.Skill1, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Skill2"].([]interface{}); !_ok_ {
			err = errors.New("Skill2 error")
			return
		}

		_v.Skill2 = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.Skill2 = append(_v.Skill2, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["SkillDisplay"].([]interface{}); !_ok_ {
			err = errors.New("SkillDisplay error")
			return
		}

		_v.SkillDisplay = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.SkillDisplay = append(_v.SkillDisplay, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Skill3"].([]interface{}); !_ok_ {
			err = errors.New("Skill3 error")
			return
		}

		_v.Skill3 = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.Skill3 = append(_v.Skill3, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Skill4"].([]interface{}); !_ok_ {
			err = errors.New("Skill4 error")
			return
		}

		_v.Skill4 = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.Skill4 = append(_v.Skill4, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["DropList"].([]interface{}); !_ok_ {
			err = errors.New("DropList error")
			return
		}

		_v.DropList = make([]*ItemDropItemPool, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemDropItemPool
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemDropItemPool(_x_); err != nil {
					return
				}
			}
			_v.DropList = append(_v.DropList, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["DeathSkill"].([]interface{}); !_ok_ {
			err = errors.New("DeathSkill error")
			return
		}

		_v.DeathSkill = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.DeathSkill = append(_v.DeathSkill, _list_v_)
		}
	}

	return
}

func DeserializeMonster(_buf map[string]interface{}) (*Monster, error) {
	v := &Monster{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
