//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type BattleRule4 struct {
	ID                     int32
	Mode                   int32
	PlayerExp1             int32
	PlayerExp2             int32
	PlayerExp3             int32
	SkillExp1              int32
	SkillExp2              int32
	SkillExp3              int32
	Gold1                  int32
	Gold2                  int32
	Gold3                  int32
	GoldContinue           int32
	GoldMvp                int32
	Time                   int32
	ReviveTimes            int32
	ReviveWait             int32
	Tips1                  string
	Tips2                  string
	Tips3                  string
	Tips4                  string
	FirstAwardLowest       int32
	TeamMember             int32
	MonsterID              int32
	MonsterBorn            []int32
	InitialMonster1        []int32
	InitialMonster2        []int32
	InitialMonster3        []int32
	InitialExpQuantityNum  int32
	RebornMonsterTime      []int32
	RebornMonsterNum       []int32
	RebornMonsterNumWeight []int32
	RebornExpQuantityNum   int32
	RebornAngle            []int32
}

const TypeId_BattleRule4 = 906584768

func (*BattleRule4) GetTypeId() int32 {
	return 906584768
}

func (_v *BattleRule4) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Mode"].(float64); !_ok_ {
			err = errors.New("Mode error")
			return
		}
		_v.Mode = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp1"].(float64); !_ok_ {
			err = errors.New("PlayerExp1 error")
			return
		}
		_v.PlayerExp1 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp2"].(float64); !_ok_ {
			err = errors.New("PlayerExp2 error")
			return
		}
		_v.PlayerExp2 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlayerExp3"].(float64); !_ok_ {
			err = errors.New("PlayerExp3 error")
			return
		}
		_v.PlayerExp3 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp1"].(float64); !_ok_ {
			err = errors.New("SkillExp1 error")
			return
		}
		_v.SkillExp1 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp2"].(float64); !_ok_ {
			err = errors.New("SkillExp2 error")
			return
		}
		_v.SkillExp2 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["SkillExp3"].(float64); !_ok_ {
			err = errors.New("SkillExp3 error")
			return
		}
		_v.SkillExp3 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold1"].(float64); !_ok_ {
			err = errors.New("Gold1 error")
			return
		}
		_v.Gold1 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold2"].(float64); !_ok_ {
			err = errors.New("Gold2 error")
			return
		}
		_v.Gold2 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Gold3"].(float64); !_ok_ {
			err = errors.New("Gold3 error")
			return
		}
		_v.Gold3 = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["GoldContinue"].(float64); !_ok_ {
			err = errors.New("GoldContinue error")
			return
		}
		_v.GoldContinue = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["GoldMvp"].(float64); !_ok_ {
			err = errors.New("GoldMvp error")
			return
		}
		_v.GoldMvp = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Time"].(float64); !_ok_ {
			err = errors.New("Time error")
			return
		}
		_v.Time = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ReviveTimes"].(float64); !_ok_ {
			err = errors.New("ReviveTimes error")
			return
		}
		_v.ReviveTimes = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ReviveWait"].(float64); !_ok_ {
			err = errors.New("ReviveWait error")
			return
		}
		_v.ReviveWait = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Tips1, _ok_ = _buf["Tips1"].(string); !_ok_ {
			err = errors.New("Tips1 error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Tips2, _ok_ = _buf["Tips2"].(string); !_ok_ {
			err = errors.New("Tips2 error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Tips3, _ok_ = _buf["Tips3"].(string); !_ok_ {
			err = errors.New("Tips3 error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.Tips4, _ok_ = _buf["Tips4"].(string); !_ok_ {
			err = errors.New("Tips4 error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["FirstAwardLowest"].(float64); !_ok_ {
			err = errors.New("FirstAwardLowest error")
			return
		}
		_v.FirstAwardLowest = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["TeamMember"].(float64); !_ok_ {
			err = errors.New("TeamMember error")
			return
		}
		_v.TeamMember = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MonsterID"].(float64); !_ok_ {
			err = errors.New("MonsterID error")
			return
		}
		_v.MonsterID = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["MonsterBorn"].([]interface{}); !_ok_ {
			err = errors.New("MonsterBorn error")
			return
		}

		_v.MonsterBorn = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.MonsterBorn = append(_v.MonsterBorn, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["InitialMonster1"].([]interface{}); !_ok_ {
			err = errors.New("InitialMonster1 error")
			return
		}

		_v.InitialMonster1 = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.InitialMonster1 = append(_v.InitialMonster1, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["InitialMonster2"].([]interface{}); !_ok_ {
			err = errors.New("InitialMonster2 error")
			return
		}

		_v.InitialMonster2 = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.InitialMonster2 = append(_v.InitialMonster2, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["InitialMonster3"].([]interface{}); !_ok_ {
			err = errors.New("InitialMonster3 error")
			return
		}

		_v.InitialMonster3 = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.InitialMonster3 = append(_v.InitialMonster3, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["InitialExpQuantityNum"].(float64); !_ok_ {
			err = errors.New("InitialExpQuantityNum error")
			return
		}
		_v.InitialExpQuantityNum = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["RebornMonsterTime"].([]interface{}); !_ok_ {
			err = errors.New("RebornMonsterTime error")
			return
		}

		_v.RebornMonsterTime = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.RebornMonsterTime = append(_v.RebornMonsterTime, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["RebornMonsterNum"].([]interface{}); !_ok_ {
			err = errors.New("RebornMonsterNum error")
			return
		}

		_v.RebornMonsterNum = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.RebornMonsterNum = append(_v.RebornMonsterNum, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["RebornMonsterNumWeight"].([]interface{}); !_ok_ {
			err = errors.New("RebornMonsterNumWeight error")
			return
		}

		_v.RebornMonsterNumWeight = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.RebornMonsterNumWeight = append(_v.RebornMonsterNumWeight, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["RebornExpQuantityNum"].(float64); !_ok_ {
			err = errors.New("RebornExpQuantityNum error")
			return
		}
		_v.RebornExpQuantityNum = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["RebornAngle"].([]interface{}); !_ok_ {
			err = errors.New("RebornAngle error")
			return
		}

		_v.RebornAngle = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.RebornAngle = append(_v.RebornAngle, _list_v_)
		}
	}

	return
}

func DeserializeBattleRule4(_buf map[string]interface{}) (*BattleRule4, error) {
	v := &BattleRule4{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
