//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type PveSettings struct {
	ID            int32
	MonsterID     int32
	RewardDisplay []*ItemReward
	MaxGetTimes   int32
	LimitReward   []int32
	GetConditions []int32
	BattleMedal   []int32
	BattleReward  []int32
	HurtReward    []*ItemHurtReward
	PlaySelectID  int32
}

const TypeId_PveSettings = -105976766

func (*PveSettings) GetTypeId() int32 {
	return -105976766
}

func (_v *PveSettings) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MonsterID"].(float64); !_ok_ {
			err = errors.New("MonsterID error")
			return
		}
		_v.MonsterID = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["RewardDisplay"].([]interface{}); !_ok_ {
			err = errors.New("RewardDisplay error")
			return
		}

		_v.RewardDisplay = make([]*ItemReward, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemReward
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemReward(_x_); err != nil {
					return
				}
			}
			_v.RewardDisplay = append(_v.RewardDisplay, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MaxGetTimes"].(float64); !_ok_ {
			err = errors.New("MaxGetTimes error")
			return
		}
		_v.MaxGetTimes = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["LimitReward"].([]interface{}); !_ok_ {
			err = errors.New("LimitReward error")
			return
		}

		_v.LimitReward = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.LimitReward = append(_v.LimitReward, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["GetConditions"].([]interface{}); !_ok_ {
			err = errors.New("GetConditions error")
			return
		}

		_v.GetConditions = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.GetConditions = append(_v.GetConditions, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BattleMedal"].([]interface{}); !_ok_ {
			err = errors.New("BattleMedal error")
			return
		}

		_v.BattleMedal = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.BattleMedal = append(_v.BattleMedal, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BattleReward"].([]interface{}); !_ok_ {
			err = errors.New("BattleReward error")
			return
		}

		_v.BattleReward = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.BattleReward = append(_v.BattleReward, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["HurtReward"].([]interface{}); !_ok_ {
			err = errors.New("HurtReward error")
			return
		}

		_v.HurtReward = make([]*ItemHurtReward, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemHurtReward
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemHurtReward(_x_); err != nil {
					return
				}
			}
			_v.HurtReward = append(_v.HurtReward, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PlaySelectID"].(float64); !_ok_ {
			err = errors.New("PlaySelectID error")
			return
		}
		_v.PlaySelectID = int32(_tempNum_)
	}
	return
}

func DeserializePveSettings(_buf map[string]interface{}) (*PveSettings, error) {
	v := &PveSettings{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
