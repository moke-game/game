//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type RankConfig struct {
	ID           int32
	RankType     int32
	RankContent  int32
	Res          int32
	BeginTime    string
	EndTime      string
	RankNum      []int32
	RankReward   []int32
	BillingCycle int32
	GamePlay     []int32
	MailID       int32
	WorldRank    int32
	RankToWorld  int32
}

const TypeId_RankConfig = -1525365074

func (*RankConfig) GetTypeId() int32 {
	return -1525365074
}

func (_v *RankConfig) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["RankType"].(float64); !_ok_ {
			err = errors.New("RankType error")
			return
		}
		_v.RankType = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["RankContent"].(float64); !_ok_ {
			err = errors.New("RankContent error")
			return
		}
		_v.RankContent = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Res"].(float64); !_ok_ {
			err = errors.New("Res error")
			return
		}
		_v.Res = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.BeginTime, _ok_ = _buf["BeginTime"].(string); !_ok_ {
			err = errors.New("BeginTime error")
			return
		}
	}
	{
		var _ok_ bool
		if _v.EndTime, _ok_ = _buf["EndTime"].(string); !_ok_ {
			err = errors.New("EndTime error")
			return
		}
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["RankNum"].([]interface{}); !_ok_ {
			err = errors.New("RankNum error")
			return
		}

		_v.RankNum = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.RankNum = append(_v.RankNum, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["RankReward"].([]interface{}); !_ok_ {
			err = errors.New("RankReward error")
			return
		}

		_v.RankReward = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.RankReward = append(_v.RankReward, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["BillingCycle"].(float64); !_ok_ {
			err = errors.New("BillingCycle error")
			return
		}
		_v.BillingCycle = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["GamePlay"].([]interface{}); !_ok_ {
			err = errors.New("GamePlay error")
			return
		}

		_v.GamePlay = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.GamePlay = append(_v.GamePlay, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["MailID"].(float64); !_ok_ {
			err = errors.New("MailID error")
			return
		}
		_v.MailID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["WorldRank"].(float64); !_ok_ {
			err = errors.New("WorldRank error")
			return
		}
		_v.WorldRank = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["RankToWorld"].(float64); !_ok_ {
			err = errors.New("RankToWorld error")
			return
		}
		_v.RankToWorld = int32(_tempNum_)
	}
	return
}

func DeserializeRankConfig(_buf map[string]interface{}) (*RankConfig, error) {
	v := &RankConfig{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
