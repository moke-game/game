//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type CharacterUnlock struct {
	ID         int32
	Name       string
	UnlockInfo []*ItemCost
	UnlockType int32
	Goto       int32
	GotoPara   []string
	Desc       string
	ReHave     []*ItemReward
}

const TypeId_CharacterUnlock = 1191345069

func (*CharacterUnlock) GetTypeId() int32 {
	return 1191345069
}

func (_v *CharacterUnlock) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["UnlockInfo"].([]interface{}); !_ok_ {
			err = errors.New("UnlockInfo error")
			return
		}

		_v.UnlockInfo = make([]*ItemCost, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemCost
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemCost(_x_); err != nil {
					return
				}
			}
			_v.UnlockInfo = append(_v.UnlockInfo, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["UnlockType"].(float64); !_ok_ {
			err = errors.New("UnlockType error")
			return
		}
		_v.UnlockType = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Goto"].(float64); !_ok_ {
			err = errors.New("Goto error")
			return
		}
		_v.Goto = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["GotoPara"].([]interface{}); !_ok_ {
			err = errors.New("GotoPara error")
			return
		}

		_v.GotoPara = make([]string, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ string
			{
				if _list_v_, _ok_ = _e_.(string); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
			}
			_v.GotoPara = append(_v.GotoPara, _list_v_)
		}
	}

	{
		var _ok_ bool
		if _v.Desc, _ok_ = _buf["Desc"].(string); !_ok_ {
			err = errors.New("Desc error")
			return
		}
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["ReHave"].([]interface{}); !_ok_ {
			err = errors.New("ReHave error")
			return
		}

		_v.ReHave = make([]*ItemReward, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemReward
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemReward(_x_); err != nil {
					return
				}
			}
			_v.ReHave = append(_v.ReHave, _list_v_)
		}
	}

	return
}

func DeserializeCharacterUnlock(_buf map[string]interface{}) (*CharacterUnlock, error) {
	v := &CharacterUnlock{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
