//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type GlobalConfig struct {
	ID     int32
	Name   string
	Num    int32
	Text   string
	Values []int32
}

const TypeId_GlobalConfig = -958250779

func (*GlobalConfig) GetTypeId() int32 {
	return -958250779
}

func (_v *GlobalConfig) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Num"].(float64); !_ok_ {
			err = errors.New("Num error")
			return
		}
		_v.Num = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Text, _ok_ = _buf["Text"].(string); !_ok_ {
			err = errors.New("Text error")
			return
		}
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["Values"].([]interface{}); !_ok_ {
			err = errors.New("Values error")
			return
		}

		_v.Values = make([]int32, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ int32
			{
				var _ok_ bool
				var _x_ float64
				if _x_, _ok_ = _e_.(float64); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				_list_v_ = int32(_x_)
			}
			_v.Values = append(_v.Values, _list_v_)
		}
	}

	return
}

func DeserializeGlobalConfig(_buf map[string]interface{}) (*GlobalConfig, error) {
	v := &GlobalConfig{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
