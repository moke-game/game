//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg

import "errors"

type MonthCard struct {
	ID         int32
	Name       string
	CardType   int32
	Duration   int32
	BuyReward  []*ItemReward
	DayReward  []*ItemReward
	PurchaseID int32
}

const TypeId_MonthCard = 703656336

func (*MonthCard) GetTypeId() int32 {
	return 703656336
}

func (_v *MonthCard) Deserialize(_buf map[string]interface{}) (err error) {
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["ID"].(float64); !_ok_ {
			err = errors.New("ID error")
			return
		}
		_v.ID = int32(_tempNum_)
	}
	{
		var _ok_ bool
		if _v.Name, _ok_ = _buf["Name"].(string); !_ok_ {
			err = errors.New("Name error")
			return
		}
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["CardType"].(float64); !_ok_ {
			err = errors.New("CardType error")
			return
		}
		_v.CardType = int32(_tempNum_)
	}
	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["Duration"].(float64); !_ok_ {
			err = errors.New("Duration error")
			return
		}
		_v.Duration = int32(_tempNum_)
	}
	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["BuyReward"].([]interface{}); !_ok_ {
			err = errors.New("BuyReward error")
			return
		}

		_v.BuyReward = make([]*ItemReward, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemReward
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemReward(_x_); err != nil {
					return
				}
			}
			_v.BuyReward = append(_v.BuyReward, _list_v_)
		}
	}

	{
		var _arr_ []interface{}
		var _ok_ bool
		if _arr_, _ok_ = _buf["DayReward"].([]interface{}); !_ok_ {
			err = errors.New("DayReward error")
			return
		}

		_v.DayReward = make([]*ItemReward, 0, len(_arr_))

		for _, _e_ := range _arr_ {
			var _list_v_ *ItemReward
			{
				var _ok_ bool
				var _x_ map[string]interface{}
				if _x_, _ok_ = _e_.(map[string]interface{}); !_ok_ {
					err = errors.New("_list_v_ error")
					return
				}
				if _list_v_, err = DeserializeItemReward(_x_); err != nil {
					return
				}
			}
			_v.DayReward = append(_v.DayReward, _list_v_)
		}
	}

	{
		var _ok_ bool
		var _tempNum_ float64
		if _tempNum_, _ok_ = _buf["PurchaseID"].(float64); !_ok_ {
			err = errors.New("PurchaseID error")
			return
		}
		_v.PurchaseID = int32(_tempNum_)
	}
	return
}

func DeserializeMonthCard(_buf map[string]interface{}) (*MonthCard, error) {
	v := &MonthCard{}
	if err := v.Deserialize(_buf); err == nil {
		return v, nil
	} else {
		return nil, err
	}
}
